[["index.html", "Análisis Muestral de Encuestas Origen-Destino Capítulo 1 Introducción 1.1 Objetivo 1.2 Instructor 1.3 Recursos y dinámica de clase", " Análisis Muestral de Encuestas Origen-Destino Act. Arturo Bringas Capítulo 1 Introducción 1.1 Objetivo El objetivo de estas sesiones es presentar de modo general la metodología estadística de muestreo para crear muestras representantivas de una población que permitan hacer inferencia sobre sus características. En las siguientes clases abordaremos los pasos para diseñar una muestra aleatoria, así como los pasos necesarios para realizar las estimaciones estadísticas a partir de los elementos observados en la muestra. Requisitos: Computadora con al menos 4Gb Ram. Instalación de R con al menos versión 4.1.0 Instalación de Rstudio con al menos versión 1.4 1.2 Instructor ACT. ARTURO BRINGAS LinkedIn: arturo-bringas Email: act.arturo.b@ciencias.unam.mx Actuario, egresado de la Facultad de Ciencias y Maestría en Ciencia de Datos, ITAM. Experiencia en modelos predictivos y de clasificación de machine learning aplicado a seguros, deportes y movilidad internacional. Es jefe de departamento en Investigación Aplicada y Opinión de la UNAM, donde realiza estudios estadísticos de impacto social. Es consultor para empresas y organizaciones como GNP, El Universal, UNAM, Sinnia, la Organización de las Naciones Unidas Contra la Droga y el Delito (UNODC), entre otros. Actualmente es profesor de ciencia de datos y machine learning en AMAT y se desempeña como consultor independiente en diferentes proyectos contribuyendo a empresas en temas de machine learning, estadística, series de tiempo, visualización de datos y análisis geoespacial. 1.3 Recursos y dinámica de clase En esta clase estaremos usando: R da click aquí si aún no lo descargas RStudio da click aquí también Notas de clase link "],["tipos-de-muestras.html", "Capítulo 2 Tipos de muestras 2.1 ¿Qué es y para qué sirve muestreo? 2.2 Ventajas e importancia de utilizar muestreo 2.3 ¿Qué se requiere para formular un problema de muestreo? 2.4 Tipos de muestreo 2.5 Instrumentos de captura de datos", " Capítulo 2 Tipos de muestras 2.1 ¿Qué es y para qué sirve muestreo? El muestreo es el proceso de seleccionar un conjunto de individuos de una población con el fin de estudiarlos y poder caracterizar el total de la población. Nos ayuda a obtener información fiable de la población a partir de una muestra de la que extrae inferencias estadísticas con un margen de error medido en términos de probabilidades. En otras palabras, en una investigación por muestreo podremos estudiar el comportamiento y las opiniones de toda una población analizando únicamente una parte de esta, teniendo en cuenta que siempre existirá un margen de error a la hora de realizar dichos cálculos. El aumento del uso de las técnicas de muestreo en la investigación es claro porque es un procedimiento que cuesta mucho menos dinero y consume menos tiempo. Una muestra bien seleccionada de unos cuantos miles de individuos puede representar con gran precisión una población de millones. ¡¡ RECORDAR !! En comparación con un censo, una muestra bien diseñada puede lograr estimaciones de alta calidad, en poco tiempo y a bajo costo a costa de un error de muestreo, el cual puede ser controlado. 2.2 Ventajas e importancia de utilizar muestreo Ventajas Reducción de costos: Los costos de un estudio serán menores si los datos de interés se pueden obtener a partir de una muestra de la población. Por ejemplo, cuando se realizan estudios de prevalencia de un evento de interés, es más económico medir una muestra representativa de 1500 sujetos de una población, que el total de individuos que la componen. Eficiencia: Al trabajar con un número reducido de sujetos de estudio, representativos de la población; el tiempo necesario para conducir el estudio y obtener resultados y conclusiones será notoriamente menor. Importancia No es posible ponerse en contacto con toda la población, por lo que solo se incluye una muestra o un subconjunto y se realiza una estimación estadística. La muestra actúa de manera representativa de toda la población, controlando el márgen de error. 2.3 ¿Qué se requiere para formular un problema de muestreo? Es requisito fundamental de una buena muestra que las características de interés que existen en la población se reflejen en la muestra de la manera más cercana posible. Esas características tienen que ver principalmente con el tamaño de la muestra y con la manera de obtenerla. Para esto se necesitan definir los siguientes conceptos: Población objetivo: Colección completa de todas las unidades que se quieren estudiar. Marco de muestreo: Listado de elementos que pertenecen a la población objetivo y son elegibles en la muestra. Muestra: Subconjunto de la población. Unidad de muestreo: Objeto a ser seleccionado en la muestra que permitirá el acceso a la unidad de observación. Unidad de observación: Objeto sobre el que finalmente se realiza la medición. Variable de interés: Característica propia de los individuos sobre la que se realiza la inferencia para resolver los objetivos de la investigación. En la teoría de muestreo la variable de interés no se supone como una variable aleatoria sino como una cantidad fija o una característica propia de las unidades que componen la población. 2.4 Tipos de muestreo Una muestra puede ser obtenida de diferentes maneras: No probabilística. Por cuotas Conveniencia Bola de nieve Discrecional Probabilística Aleatorio Simple Sistemático Estratificado Conglomerados Polietápico Etc. A continuación se definen y muestran las diferencias de estas técnicas de muestreo. 2.4.1 Muestreo no probabilístico Utiliza métodos en que no interviene el azar, por lo que se desconoce la probabilidad asociada a cada individuo para formar parte de la muestra. Normalmente estos métodos se utilizan en estudios exploratorios o intencionales, en los cuales no es necesario proyectar los resultados. El inconveniente de este método es que no puede asegurarse la representatividad de la muestra. Los sistemas de muestreo no probabilísticos se clasifican de la siguiente manera: Muestreo por cuotas o cupos: Si se conocen las características de la población a estudiar, se elegirán los individuos respetando ciertas cuotas por edad, género, zona de residencia, entre otras que habrán sido prefijadas. Primero se realiza una clara división por cuotas (estratos) y posteriormente a cada cuota se aplica un muestreo discrecional. Ejemplo: Seleccionar 20 estudiantes de la carrera de ingeniería industrial, que ya hayan cursado el noveno semestre de la carrera y que tengan promedio arriba del 6.5. Se eligen a los primeros 20 que cumplan con estas condiciones. Este tipo de muestreo se utiliza especialmente en las encuestas de opinión. Muestreo por conveniencia: Las muestras de la población se seleccionan solo porque están convenientemente disponibles para el investigador. Es la técnica de muestreo no probabilística más común, debido a su velocidad, costo-efectividad y facilidad de disponibilidad de la muestra. Ejemplo: Utilizar a estudiantes voluntarios que sean conocidos del investigador. El investigador puede enviar la encuesta a los estudiantes y ellos en este caso actuarían como muestra. Muestreo bola de nieve: Se basa en referencias de sujetos iniciales para generar sujetos adicionales, de ahí deriva su nombre. Cuando se aplica este método de muestreo, los miembros del grupo de muestra se reclutan a través de una remisión en cadena. Estos pasos se repiten hasta que se encuentra el tamaño de muestra necesario. Éticamente, no se debe pedir a los participantes del estudio que identifiquen a otros participantes potenciales. Más bien, se les debe pedir que alienten a otros a que participen. Este muestreo consiste en dos partes: Identificar sujetos potenciales en la población. A menudo, sólo uno o dos sujetos pueden ser encontrados inicialmente. Pedir a esos sujetos que recluten a otras personas. Los participantes deben ser conscientes de que no tienen que proporcionar ningún otro nombre. Ejemplo: Realizar estudios con poblaciones marginales, tipos de enfermos, especialistas, etc. Muestreo discrecional: La muestra es elegida a partir de un criterio profesional y puede basarse en la experiencia de investigaciones realizadas con anterioridad o en el conocimiento que el investigador tiene sobre la población. Es difícil estimar cuán cerca de la realidad se encuentra esta estimación. De hecho, la relevancia de los resultados depende de la experiencia del investigador. Ejemplo 1: se desea realizar una investigación sobre el comportamiento de los padres con sus hijos. Por lo tanto, el investigador selecciona como muestra a personas que tengan hijos, ya que las considera aptas de conocimiento para formar parte de la investigación. Ejemplo 2: Una prueba piloto podría realizarse a través de una muestra conformada por unidades de interés para el investigador que previamente sabe que puede poner a prueba el proceso de medición y los instrumentos de recolección de datos. ¡¡¡ RECORDAR !!! Los diseños de muestra no probabilísticos NO TIENEN REPRESENTATIVIDAD ESTADÍSTICA, por lo que los resultados no pueden generalizarse al resto de la población. 2.4.2 Muestreo probabilístico El muestreo probabilístico se define como aquél en que todos los individuos de la población tienen una probabilidad de entrar a formar parte de la muestra. Los diseños en que interviene el azar producen muestras representativas la mayoría de las veces. Los sistemas de muestreo probabilísticos de clasifican de la siguiente manera: Muestreo aleatorio simple: Se caracteriza porque cada elemento de la población tiene la misma probabilidad de ser escogido para formar parte de la muestra y todas las posibles muestras tienen la misma probabilidad de ser elegidas. Una vez censado el marco de la población, se asigna un número a cada individuo o elemento y se elige aleatoriamente. Para seleccionar una muestra de este tipo se requiere tener en forma de lista todos los elementos que integran la población investigada y utilizar tablas de números aleatorios. Ejemplo: A un grupo de 100 personas se les numera de uno a cien y se depositan en una urna 100 canicas a su vez numeradas de uno a cien. Para obtener una muestra aleatoria simple de 20 elementos, tendríamos que sacar 20 canicas numeradas de la urna que nos seleccionarán en forma completamente aleatoria a los 20 elementos escogidos para que opinen sobre un nuevo producto. Muestreo sistemático: Es susceptible de ser más preciso que el muestreo aleatorio simple. Se elige un primer elemento del universo y luego se van escogiendo otros elementos igualmente espaciados a partir del primero. Consiste en dividir la población en \\(n\\) estratos, compuestos de \\(k\\) unidades. Ejemplo: a partir de una lista de 100 establecimientos de comestibles, deseamos seleccionar una muestra probabilística de 25 tiendas. La forma de hacerlo sería: Dividir 100 entre 25 para obtener 4 tiendas que es el salto sistemático. Extraer un número al azar entre 1 y 4. Supóngase que es el número 3 el cual corresponde al primer elemento seleccionado. Se incluyen en la muestra de establecimientos numerados: \\(3, 7, 11, 15\\) Muestreo estratificado: En este tipo de muestreo la población de estudio se divide en subgrupos o estratos, escogiendo posteriormente una muestra al azar de cada estrato. Esta división suele realizarse según una característica que pueda influir sobre los resultados del estudio. Si la estratificación se realiza respecto una característica se denomina muestreo estratificado simple, y si se realiza respecto a dos o más características sedenomina muestreo estratificado compuesto. Ejemplo: Si existen 5 millones de hipertensos en una población y hay un \\(35\\%\\) de pacientes que fuman, podemos estratificar de manera que en nuestra muestra queden representados al igual que en el total de la población, la misma proporción de hipertensos fumadores (\\(35\\%\\)) y de no fumadores (\\(65\\%\\)). Muestreo por conglomerados: El muestreo por conglomerados nos ayuda cuando es imposible o poco práctico crear un marco de muestreo de una población objetivo debido a que está muy dispersa geográficamente y el costo de la recopilación de datos es relativamente alto. Los elementos de la población son seleccionados al azar en forma natural por agrupaciones (clusters). Los elementos del muestreo se seleccionan de la población de manera individual, uno a la vez. La heterogeneidad del grupo es fundamental para un buen diseño del muestreo por conglomerados. Por otra parte, los elementos dentro de cada grupo debe ser tan heterogéneos como la población objetivo Ejemplo: Una ONG quiere crear una muestra de niños en edad escolar primaria en 5 ciudades vecinas para obtener información sobre su nivel de educación. Muestreo poli-etápico: Consiste en empezar a muestrear por algo que no constituye el objeto de la investigación (unidades primarias), y obtener una muestra dentro de cada una de ellas (unidades secundarias). Pueden utilizarse sucesivamente tantas etapas como sean necesarias, y en cada una de ellas, una técnica de muestreo diferente. Este método de muestreo se utiliza cuando la población de referencia es muy amplia y dispersa, ya que facilita la realización del estudio. Muestreo proporcional al tamaño de la población (PPT): Método en el que la probabilidad de selección de una determinada unidad de muestreo es proporcional a su tamaño (generalmente el número de individuos u hogares que contiene la unidad de muestreo). En estas situaciones, si se utilizara el muestreo aleatorio para seleccionar las unidades de muestreo, los individuos de las mayores unidades de muestreo tendrían una probabilidad mucho menor de ser seleccionados que los de las unidades de muestreo más pequeñas Ejemplo: Elegir primero hospitales y después de haberlos seleccionado, realizamos el muestreo de pacientes dentro de cada hospital. 2.5 Instrumentos de captura de datos La encuesta es una técnica de recolección de datos que consta de una serie de preguntas estandarizadas hechas a una muestra representativa de la población de la que buscamos obtener información. Es una técnica útil para cualquiera que busque recopilar datos. Asociado con cada elemento de la población existe una o más variables de interés. Una encuesta permite conseguir información sobre características poblacionales desconocidas llamadas parámetros. 2.5.1 Tipos de encuestas según la forma de aplicación Encuesta por correo: Consiste en enviar un cuestionario a través del servicio postal para que después de ser respondido, sea regresado al remitente. Encuesta por vía telefónica: Consiste en realizar el cuestionario a través de una llamada telefónica, en la que el encuestador debe ir capturando las respuestas del encuestado. Encuesta personal: Consiste en realizar el cuestionario cara a cara, debe existir una interacción entre encuestador y encuestado, normalmente el encuestador toma nota de las respuestas aunque en ocasiones solo entrega el cuestionario y es el encuestado quien lo llena. Una encuesta personal puede ser de dos tipos: De intercepción: el investigador suele ubicarse en espacios públicos como centros comerciales o parques para hacer una entrevista con preguntas concisas a personas que integran su muestra de estudio. De puerta en puerta: En este tipo de encuestas, el investigador recorre casa por casa y solicita al participante tiempo para poder hacer aplicar el cuestionario. Encuesta online: Consiste en realizar el cuestionario utilizando el internet como medio de distribución, las encuestas online se caracterizan principalmente por ser económicas. "],["introducción-a-r.html", "Capítulo 3 Introducción a R 3.1 ¿Cómo obtener R? 3.2 ¿Qué es RStudio? 3.3 R como lenguaje orientado a objetos 3.4 Estructuras de almacenamiento 3.5 Lectura de datos 3.6 Consulta de datos", " Capítulo 3 Introducción a R R (R Core Team) es un entorno y lenguaje de programación que permite el análisis estadístico de información y reportes gráficos. Es ampliamente usado en investigación por la comunidad estadística en campos como la biomedicina, minería de datos, matemáticas financieras, entre otros. Ha ganado mucha popularidad en los últimos años al ser un software libre que está en constante crecimiento por las aportaciones de otros usuarios y que permite la interacción con software estadísticos como STATA, SAS, SPSS, etc.. R permite la incorporación de librerías y paqueterías con funcionalidades específicas, por lo que es un lenguaje de programación muy completo y fácil de usar. 3.1 ¿Cómo obtener R? R puede ser fácilmente descargado de forma gratuita desde el sitio oficial http://www.r-project.org/. R está disponible para las plataformas Windows, Mac y Linux. 3.2 ¿Qué es RStudio? RStudio es un Entorno de Desarrollo Integrado (IDE, por sus siglas en inglés) para R. Este permite y facilita el desarrollo y ejecución de sintaxis para código en R, incluye una consola y proporciona herramientas para la gestión del espacio de trabajo. RStudio está disponible para Windows, Mac y Linux o para navegadores conectados a RStudio Server o RStudio Server Pro. Algunas de las principales características de Rstudio que lo hacen una gran herramienta para trabajar en R, son: Auto completado de código Sangría inteligente Resaltado de sintaxis Facilidad para definir funciones Soporte integrado Documentación integrada Administración de directorios y proyectos Visor de datos Depurador interactivo para corregir errores Conección con Rmarkwon y Sweave La siguiente imagen muestra la forma en la que está estructurado RStudio. El orden de los páneles puede ser elegido por el usuario, así como las características de tipo de letra, tamaño y color de fondo, entre otras características. Figure 3.1: Páneles de trabajo de Rstudio 3.3 R como lenguaje orientado a objetos R es un lenguaje de programación orientado a objetos (POO). (López 2011, pag. 5) define a los objetos y sus características como “cualquier cosa con significado para el problema que se trata de resolver.” A partir de esa definición, se puede decir que sirve para representar alguna entidad de la vida real, por lo general son componentes del problema que se pretende resolver y con los que podemos interactuar. A través de esta interacción y del estudio que se haga de ellos, es posible clasificarlos en grupos de acuerdo a sus caractrerísticas. A partir de los objetos con los que se trabaje, surgirán las clases adecuadas para encontrar la solución a un problema dado. Los objetos tienen características fundamentales que permiten identificarlos, conocerlos y entender su comportamiento. De acuerdo con (Schildt 2009), estas características son: Identidad Comportamiento Estructura Identidad: Esta es la propiedad que da nombre a cada uno de los objetos y que permite declararlos, distinguirlos de manera única, usarlos y llamarlos para la representación de su contenido. Comportamiento: Esta es la propiedad que determina las operaciones que puede realizar el objeto, es decir, permite conocer las capacidades y alcances de la funcionalidad de cada objeto. El comportamiento permite conocer la interacción que puede existir con otros objetos y los resultrados que generarán. Estructura: El estado se refiere a un conjunto de características o atributos específicos del objeto dados en un momento determinado, y que pueden cambiar en un instante de tiempo. En la programación orientada a objetos, un programa recolecta muchos objetos para ser tratado como un conjunto dinámico de objetos interactuando entre sí. Los objetos están definidos por: Atributos: Son las propiedades o características de los datos contenidos en un objeto. Los valores asociados a un objeto en un momento determinado del tiempo determinan su estado. Métodos: Acceden a los atributos de los objetos y determinan el comportamiento de los datos contenidos. 3.4 Estructuras de almacenamiento Para este capítulo usaremos las notas de ‘fhernanb’: Manual de R En R existen varios tipos de objectos que permiten que el usuario pueda almacenar la información para realizar procedimientos estadísticos y gráficos. Los principales objetos en R son vectores, matrices, arreglos, marcos de datos y listas. A continuación se presentan las características de estos objetos y la forma para crearlos. 3.4.1 Variables Las variables sirven para almacenar un valor que luego vamos a utilizar en algún procedimiento. Para hacer la asignación de un valor a alguna variable se utiliza el operador &lt;- entre el valor y el nombre de la variable. A continuación un ejemplo sencillo. x &lt;- 5 (2 * x) + 3 ## [1] 13 En el siguiente ejemplo se crea la variable pais y se almacena el nombre Colombia, luego se averigua el número de caracteres de la variable pais. pais &lt;- &quot;Colombia&quot; nchar(pais) ## [1] 8 También existen variables lógicas y estas toman los valores verdadero (TRUE) o falso (FALSE) dependiendo del resultado lógico puesto a prueba. Ejemplo: y &lt;- 10 y == (5 + 3 + 2) ## [1] TRUE y != 5 + 5 ## [1] FALSE 3.4.2 Vectores Los vectores vectores son arreglos ordenados en los cuales se puede almacenar información de tipo numérico (variable cuantitativa), alfanumérico (variable cualitativa) o lógico (TRUE o FALSE), pero no mezclas de éstos. La función de R para crear un vector es c() y que significa concatenar; dentro de los paréntesis de esta función se ubica la información a almacenar. Una vez construído el vector se acostumbra a etiquetarlo con un nombre corto y representativo de la información que almacena, la asignación se hace por medio del operador &lt;- entre el nombre y el vector. A continuación se presenta un ejemplo de cómo crear tres vectores que contienen las respuestas de cinco personas a tres preguntas que se les realizaron. edad &lt;- c(15, 19, 13, NA, 20) deporte &lt;- c(TRUE, TRUE, NA, FALSE, TRUE) comic_fav &lt;- c(NA, &#39;Superman&#39;, &#39;Batman&#39;, NA, &#39;Batman&#39;) El vector edad es un vector cuantitativo y contiene las edades de las 5 personas. En la cuarta posición del vector se colocó el símbolo NA que significa Not Available debido a que no se registró la edad para esa persona. Al hacer una asignación se acostumbra a dejar un espacio antes y después del operador &lt;- de asignación. El segundo vector es llamado deporte y es un vector lógico que almacena las respuestas a la pregunta de si la persona practica deporte, nuevamente aquí hay un NA para la tercera persona. El último vector comic_fav contiene la información del cómic favorito de cada persona, como esta variable es cualitativa es necesario usar las comillas ’ ’ para encerrar las respuestas. ¡¡ RECORDAR !! Cuando se usa NA para representar una información Not Available no se deben usar comillas. Es posible usar comillas sencillas ‘foo’ o comillas dobles “foo” para ingresar valores de una variable cualitativa. Si se desea ver lo que está almacenado en cada uno de estos vectores, se debe escribir en la consola de R el nombre de uno de los objetos y luego se presiona la tecla enter o intro, al realizar esto lo que se obtiene se muestra a continuación. edad ## [1] 15 19 13 NA 20 deporte ## [1] TRUE TRUE NA FALSE TRUE comic_fav ## [1] NA &quot;Superman&quot; &quot;Batman&quot; NA &quot;Batman&quot; 3.4.2.1 Cómo extraer elementos de un vector? Para extraer un elemento almacenado dentro un vector se usan los corchetes [] y dentro de ellos la posición o posiciones que interesan. Ejemplo Si queremos extraer la edad de la tercera persona escribimos el nombre del vector y luego \\[3\\] para indicar la tercera posición de edad, a continuación el código. edad[3] ## [1] 13 Si queremos conocer el cómic favorito de la segunda y quinta persona, escribimos el nombre del vector y luego, dentro de los corchetes, escribimos otro vector con las posiciones 2 y 5 que nos interesan así: \\(c(2, 5)\\), a continuación el código. comic_fav[c(2, 5)] ## [1] &quot;Superman&quot; &quot;Batman&quot; Si nos interesan las respuestas de la práctica de deporte, excepto la de la persona 3, usamos \\[-3\\] luego del nombre del vector para obtener todo, excepto la tercera posición. deporte[-3] ## [1] TRUE TRUE FALSE TRUE ¡¡ RECORDAR !! Si desea extraer varios posiciones de un vector NUNCA escriba esto: mi_vector[2, 5, 7]. Tiene que crear un vector con las posiciones y luego colocarlo dentro de los corchetes así: \\[mi\\_vector[c(2, 5, 7)]\\] 3.4.3 Data Frames El marco de datos marco de datos o data frame es uno de los objetos más utilizados porque permite agrupar vectores con información de diferente tipo (numérica, alfanumérica o lógica) en un mismo objeto, la única restricción es que los vectores deben tener la misma longitud. Para crear un marco de datos se usa la función data.frame( ), como ejemplo vamos a crear un marco de datos con los vectores edad, deporte y comic_fav definidos anteriormente. mi_data_frame &lt;- data.frame(edad, deporte, comic_fav) Una vez creado el objeto mi_data_frame podemos ver el objeto escribiendo su nombre en la consola, a continuación se muestra lo que se obtiene. mi_data_frame ## edad deporte comic_fav ## 1 15 TRUE &lt;NA&gt; ## 2 19 TRUE Superman ## 3 13 NA Batman ## 4 NA FALSE &lt;NA&gt; ## 5 20 TRUE Batman De la salida anterior vemos que el marco de datos tiene 3 variables (columnas) cuyos nombres coinciden con los nombres de los vectores creados anteriormente, los números consecutivos al lado izquierdo son sólo de referencia y permiten identificar la información para cada persona en la base de datos. 3.4.4 Ejercicios Use funciones o procedimientos (varias líneas) de R para responder cada una de las siguientes preguntas. Construya un vector con 10 nombres de personas. Construya un vector con las edades de las 10 personas anteriores. Construya un marco de datos o data frame con las respuestas de 10 personas a las preguntas: ¿Cuál es su nombre? Sexo de la persona ¿Cuál es su edad en años? ¿En qué alcaldía vive? ¿En qué alcaldía trabaja? 3.5 Lectura de datos El primer paso para analizar datos es incorporarlos a la sesión de R para que puedan ser manipulados y observados. Existen múltiples librerías y funciones en R que permiten leer la información proveniente de un archivo externo, el cual puede tener una de muchas posibles extensiones. Usualmente, no creamos los datos desde la sesión de R, sino que a través de un archivo externo se realiza la lectura de datos escritos en un archivo. Los más comúnes son: La paquetería readr fue desarrollada recientemente para lidiar con la lectura de archivos grandes rápidamente. Esta paquetería proporciona funciones que suelen ser mucho más rápidas que las funciones base que proporciona R. Ventajas de readr: Por lo general, son mucho más rápidos (~ 10x) que sus funciones equivalentes. Producen tibbles: No convierten vectores de caracteres en factores. No usan nombres de filas ni modifican los nombres de columnas. Reproducibilidad 3.5.1 Archivos csv A la hora de importar conjuntos de datos en R, uno de los formatos más habituales en los que hallamos información es en archivos separados por comas (comma separated values), cuya extensión suele ser .csv. En ellos encontramos múltiples líneas que recogen la tabla de interés, y en las cuales los valores aparecen, de manera consecutiva, separados por el carácter ,. Para importar este tipo de archivos en nuestra sesión de R, se utiliza la función read_csv(). Para acceder a su documentación utilizamos el comando ?read_csv. El único argumento que debemos de pasar a esta función de manera obligatoria, es file, el nombre o la ruta completa del archivo que pretendemos importar. library(readr) library(dplyr) Algunas de las ventajas de utilizar read_csv() son: No convierte, automáticamente, las columnas con cadenas de caracteres a factores, como sí hacen por defecto las otras funciones base de R. Reconoce ocho clases diferentes de datos (enteros, lógicos, etc.), dejando el resto como cadenas de caracteres. Veamos un ejemplo: La tabla de datos llamada ITER_NAL_CNPV20 contiene un conjunto de datos con información del Censo Nacional de Población y Vivienda creado por INEGI en el año 2020. Contiene datos desagregados y agregados en distintos niveles, por lo que es necesario limpiarlo para obtener un apropiado marco de muestreo. tidy &lt;- read_csv(&quot;data/ITER_NAL_CNPV20.csv&quot;) ## Rows: 195662 Columns: 232 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (229): ENTIDAD, NOM_ENT, MUN, NOM_MUN, LOC, NOM_LOC, LONGITUD, LATITUD, ... ## dbl (3): POBTOT, VIVTOT, TVIVHAB ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. glimpse(tidy) ## Rows: 195,662 ## Columns: 232 ## $ ENTIDAD &lt;chr&gt; &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;… ## $ NOM_ENT &lt;chr&gt; &quot;Total nacional&quot;, &quot;Total nacional&quot;, &quot;Total nacional&quot;, &quot;Agu… ## $ MUN &lt;chr&gt; &quot;000&quot;, &quot;000&quot;, &quot;000&quot;, &quot;000&quot;, &quot;000&quot;, &quot;000&quot;, &quot;001&quot;, &quot;001&quot;, &quot;0… ## $ NOM_MUN &lt;chr&gt; &quot;Total nacional&quot;, &quot;Total nacional&quot;, &quot;Total nacional&quot;, &quot;Tot… ## $ LOC &lt;chr&gt; &quot;0000&quot;, &quot;9998&quot;, &quot;9999&quot;, &quot;0000&quot;, &quot;9998&quot;, &quot;9999&quot;, &quot;0000&quot;, &quot;0… ## $ NOM_LOC &lt;chr&gt; &quot;Total nacional&quot;, &quot;Localidades de una vivienda&quot;, &quot;Localida… ## $ LONGITUD &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, &quot;102°17&#39;45.768\\&quot; W&quot;, &quot;102°22&#39;2… ## $ LATITUD &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, &quot;21°52&#39;47.362\\&quot; N&quot;, &quot;21°52&#39;18.… ## $ ALTITUD &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, &quot;1878&quot;, &quot;1902&quot;, &quot;1861&quot;, &quot;1861&quot;… ## $ POBTOT &lt;dbl&gt; 126014024, 250354, 147125, 1425607, 3697, 3021, 948990, 86… ## $ POBFEM &lt;chr&gt; &quot;64540634&quot;, &quot;96869&quot;, &quot;61324&quot;, &quot;728924&quot;, &quot;1510&quot;, &quot;1013&quot;, &quot;4… ## $ POBMAS &lt;chr&gt; &quot;61473390&quot;, &quot;153485&quot;, &quot;85801&quot;, &quot;696683&quot;, &quot;2187&quot;, &quot;2008&quot;, &quot;… ## $ P_0A2 &lt;chr&gt; &quot;5764054&quot;, &quot;10493&quot;, &quot;6798&quot;, &quot;71864&quot;, &quot;165&quot;, &quot;119&quot;, &quot;44372&quot;… ## $ P_0A2_F &lt;chr&gt; &quot;2848875&quot;, &quot;5193&quot;, &quot;3407&quot;, &quot;35604&quot;, &quot;81&quot;, &quot;54&quot;, &quot;21893&quot;, &quot;… ## $ P_0A2_M &lt;chr&gt; &quot;2915179&quot;, &quot;5300&quot;, &quot;3391&quot;, &quot;36260&quot;, &quot;84&quot;, &quot;65&quot;, &quot;22479&quot;, &quot;… ## $ P_3YMAS &lt;chr&gt; &quot;119976584&quot;, &quot;239441&quot;, &quot;139757&quot;, &quot;1352235&quot;, &quot;3532&quot;, &quot;2902&quot;… ## $ P_3YMAS_F &lt;chr&gt; &quot;61554567&quot;, &quot;91463&quot;, &quot;57628&quot;, &quot;692561&quot;, &quot;1429&quot;, &quot;959&quot;, &quot;46… ## $ P_3YMAS_M &lt;chr&gt; &quot;58422017&quot;, &quot;147978&quot;, &quot;82129&quot;, &quot;659674&quot;, &quot;2103&quot;, &quot;1943&quot;, &quot;… ## $ P_5YMAS &lt;chr&gt; &quot;115693273&quot;, &quot;232086&quot;, &quot;135028&quot;, &quot;1299669&quot;, &quot;3420&quot;, &quot;2829&quot;… ## $ P_5YMAS_F &lt;chr&gt; &quot;59433559&quot;, &quot;87931&quot;, &quot;55256&quot;, &quot;666713&quot;, &quot;1377&quot;, &quot;925&quot;, &quot;44… ## $ P_5YMAS_M &lt;chr&gt; &quot;56259714&quot;, &quot;144155&quot;, &quot;79772&quot;, &quot;632956&quot;, &quot;2043&quot;, &quot;1904&quot;, &quot;… ## $ P_12YMAS &lt;chr&gt; &quot;100528155&quot;, &quot;207748&quot;, &quot;119223&quot;, &quot;1116719&quot;, &quot;3018&quot;, &quot;2553&quot;… ## $ P_12YMAS_F &lt;chr&gt; &quot;51962264&quot;, &quot;76111&quot;, &quot;47543&quot;, &quot;576593&quot;, &quot;1179&quot;, &quot;798&quot;, &quot;39… ## $ P_12YMAS_M &lt;chr&gt; &quot;48565891&quot;, &quot;131637&quot;, &quot;71680&quot;, &quot;540126&quot;, &quot;1839&quot;, &quot;1755&quot;, &quot;… ## $ P_15YMAS &lt;chr&gt; &quot;93985354&quot;, &quot;197411&quot;, &quot;111530&quot;, &quot;1038904&quot;, &quot;2836&quot;, &quot;2444&quot;,… ## $ P_15YMAS_F &lt;chr&gt; &quot;48732991&quot;, &quot;71344&quot;, &quot;44275&quot;, &quot;538387&quot;, &quot;1086&quot;, &quot;740&quot;, &quot;36… ## $ P_15YMAS_M &lt;chr&gt; &quot;45252363&quot;, &quot;126067&quot;, &quot;67255&quot;, &quot;500517&quot;, &quot;1750&quot;, &quot;1704&quot;, &quot;… ## $ P_18YMAS &lt;chr&gt; &quot;87492680&quot;, &quot;186968&quot;, &quot;104612&quot;, &quot;960764&quot;, &quot;2609&quot;, &quot;2341&quot;, … ## $ P_18YMAS_F &lt;chr&gt; &quot;45530857&quot;, &quot;66514&quot;, &quot;41184&quot;, &quot;500089&quot;, &quot;987&quot;, &quot;699&quot;, &quot;343… ## $ P_18YMAS_M &lt;chr&gt; &quot;41961823&quot;, &quot;120454&quot;, &quot;63428&quot;, &quot;460675&quot;, &quot;1622&quot;, &quot;1642&quot;, &quot;… ## $ P_3A5 &lt;chr&gt; &quot;6462212&quot;, &quot;10900&quot;, &quot;7028&quot;, &quot;78833&quot;, &quot;169&quot;, &quot;113&quot;, &quot;48767&quot;… ## $ P_3A5_F &lt;chr&gt; &quot;3193548&quot;, &quot;5270&quot;, &quot;3511&quot;, &quot;38679&quot;, &quot;80&quot;, &quot;47&quot;, &quot;23951&quot;, &quot;… ## $ P_3A5_M &lt;chr&gt; &quot;3268664&quot;, &quot;5630&quot;, &quot;3517&quot;, &quot;40154&quot;, &quot;89&quot;, &quot;66&quot;, &quot;24816&quot;, &quot;… ## $ P_6A11 &lt;chr&gt; &quot;12986217&quot;, &quot;20793&quot;, &quot;13506&quot;, &quot;156683&quot;, &quot;345&quot;, &quot;236&quot;, &quot;979… ## $ P_6A11_F &lt;chr&gt; &quot;6398755&quot;, &quot;10082&quot;, &quot;6574&quot;, &quot;77289&quot;, &quot;170&quot;, &quot;114&quot;, &quot;48353&quot;… ## $ P_6A11_M &lt;chr&gt; &quot;6587462&quot;, &quot;10711&quot;, &quot;6932&quot;, &quot;79394&quot;, &quot;175&quot;, &quot;122&quot;, &quot;49594&quot;… ## $ P_8A14 &lt;chr&gt; &quot;15287375&quot;, &quot;24342&quot;, &quot;16724&quot;, &quot;181905&quot;, &quot;427&quot;, &quot;262&quot;, &quot;114… ## $ P_8A14_F &lt;chr&gt; &quot;7531118&quot;, &quot;11538&quot;, &quot;7679&quot;, &quot;89383&quot;, &quot;211&quot;, &quot;133&quot;, &quot;56248&quot;… ## $ P_8A14_M &lt;chr&gt; &quot;7756257&quot;, &quot;12804&quot;, &quot;9045&quot;, &quot;92522&quot;, &quot;216&quot;, &quot;129&quot;, &quot;58303&quot;… ## $ P_12A14 &lt;chr&gt; &quot;6542801&quot;, &quot;10337&quot;, &quot;7693&quot;, &quot;77815&quot;, &quot;182&quot;, &quot;109&quot;, &quot;49497&quot;… ## $ P_12A14_F &lt;chr&gt; &quot;3229273&quot;, &quot;4767&quot;, &quot;3268&quot;, &quot;38206&quot;, &quot;93&quot;, &quot;58&quot;, &quot;24224&quot;, &quot;… ## $ P_12A14_M &lt;chr&gt; &quot;3313528&quot;, &quot;5570&quot;, &quot;4425&quot;, &quot;39609&quot;, &quot;89&quot;, &quot;51&quot;, &quot;25273&quot;, &quot;… ## $ P_15A17 &lt;chr&gt; &quot;6492674&quot;, &quot;10443&quot;, &quot;6918&quot;, &quot;78140&quot;, &quot;227&quot;, &quot;103&quot;, &quot;49934&quot;… ## $ P_15A17_F &lt;chr&gt; &quot;3202134&quot;, &quot;4830&quot;, &quot;3091&quot;, &quot;38298&quot;, &quot;99&quot;, &quot;41&quot;, &quot;24477&quot;, &quot;… ## $ P_15A17_M &lt;chr&gt; &quot;3290540&quot;, &quot;5613&quot;, &quot;3827&quot;, &quot;39842&quot;, &quot;128&quot;, &quot;62&quot;, &quot;25457&quot;, … ## $ P_18A24 &lt;chr&gt; &quot;14736111&quot;, &quot;27841&quot;, &quot;16336&quot;, &quot;180847&quot;, &quot;438&quot;, &quot;439&quot;, &quot;120… ## $ P_18A24_F &lt;chr&gt; &quot;7398617&quot;, &quot;11140&quot;, &quot;6760&quot;, &quot;90632&quot;, &quot;180&quot;, &quot;123&quot;, &quot;60159&quot;… ## $ P_18A24_M &lt;chr&gt; &quot;7337494&quot;, &quot;16701&quot;, &quot;9576&quot;, &quot;90215&quot;, &quot;258&quot;, &quot;316&quot;, &quot;60293&quot;… ## $ P_15A49_F &lt;chr&gt; &quot;33885546&quot;, &quot;47693&quot;, &quot;29297&quot;, &quot;388917&quot;, &quot;750&quot;, &quot;531&quot;, &quot;260… ## $ P_60YMAS &lt;chr&gt; &quot;15142976&quot;, &quot;37383&quot;, &quot;21277&quot;, &quot;145376&quot;, &quot;448&quot;, &quot;281&quot;, &quot;102… ## $ P_60YMAS_F &lt;chr&gt; &quot;8139094&quot;, &quot;13442&quot;, &quot;8916&quot;, &quot;78703&quot;, &quot;190&quot;, &quot;116&quot;, &quot;56724&quot;… ## $ P_60YMAS_M &lt;chr&gt; &quot;7003882&quot;, &quot;23941&quot;, &quot;12361&quot;, &quot;66673&quot;, &quot;258&quot;, &quot;165&quot;, &quot;46263… ## $ REL_H_M &lt;chr&gt; &quot;95.25&quot;, &quot;158.45&quot;, &quot;139.91&quot;, &quot;95.58&quot;, &quot;144.83&quot;, &quot;198.22&quot;, … ## $ POB0_14 &lt;chr&gt; &quot;31755284&quot;, &quot;52523&quot;, &quot;35025&quot;, &quot;385195&quot;, &quot;861&quot;, &quot;577&quot;, &quot;240… ## $ POB15_64 &lt;chr&gt; &quot;83663440&quot;, &quot;171209&quot;, &quot;96250&quot;, &quot;941834&quot;, &quot;2524&quot;, &quot;2241&quot;, &quot;… ## $ POB65_MAS &lt;chr&gt; &quot;10321914&quot;, &quot;26202&quot;, &quot;15280&quot;, &quot;97070&quot;, &quot;312&quot;, &quot;203&quot;, &quot;6794… ## $ PROM_HNV &lt;chr&gt; &quot;2.09&quot;, &quot;*&quot;, &quot;*&quot;, &quot;2.11&quot;, &quot;*&quot;, &quot;*&quot;, &quot;1.98&quot;, &quot;1.95&quot;, &quot;*&quot;, &quot;… ## $ PNACENT &lt;chr&gt; &quot;102724322&quot;, &quot;177757&quot;, &quot;117805&quot;, &quot;1133247&quot;, &quot;2908&quot;, &quot;2370&quot;… ## $ PNACENT_F &lt;chr&gt; &quot;52519974&quot;, &quot;75977&quot;, &quot;52686&quot;, &quot;576781&quot;, &quot;1216&quot;, &quot;811&quot;, &quot;36… ## $ PNACENT_M &lt;chr&gt; &quot;50204348&quot;, &quot;101780&quot;, &quot;65119&quot;, &quot;556466&quot;, &quot;1692&quot;, &quot;1559&quot;, &quot;… ## $ PNACOE &lt;chr&gt; &quot;21611963&quot;, &quot;54046&quot;, &quot;20274&quot;, &quot;276430&quot;, &quot;749&quot;, &quot;616&quot;, &quot;214… ## $ PNACOE_F &lt;chr&gt; &quot;11222300&quot;, &quot;18910&quot;, &quot;7205&quot;, &quot;144420&quot;, &quot;275&quot;, &quot;198&quot;, &quot;1128… ## $ PNACOE_M &lt;chr&gt; &quot;10389663&quot;, &quot;35136&quot;, &quot;13069&quot;, &quot;132010&quot;, &quot;474&quot;, &quot;418&quot;, &quot;102… ## $ PRES2015 &lt;chr&gt; &quot;111075594&quot;, &quot;184423&quot;, &quot;114178&quot;, &quot;1232234&quot;, &quot;2721&quot;, &quot;1638&quot;… ## $ PRES2015_F &lt;chr&gt; &quot;57288776&quot;, &quot;79893&quot;, &quot;52604&quot;, &quot;635320&quot;, &quot;1298&quot;, &quot;779&quot;, &quot;42… ## $ PRES2015_M &lt;chr&gt; &quot;53786818&quot;, &quot;104530&quot;, &quot;61574&quot;, &quot;596914&quot;, &quot;1423&quot;, &quot;859&quot;, &quot;3… ## $ PRESOE15 &lt;chr&gt; &quot;3807844&quot;, &quot;16172&quot;, &quot;6214&quot;, &quot;56422&quot;, &quot;152&quot;, &quot;77&quot;, &quot;42481&quot;,… ## $ PRESOE15_F &lt;chr&gt; &quot;1889986&quot;, &quot;6089&quot;, &quot;1664&quot;, &quot;27956&quot;, &quot;69&quot;, &quot;36&quot;, &quot;21032&quot;, &quot;… ## $ PRESOE15_M &lt;chr&gt; &quot;1917858&quot;, &quot;10083&quot;, &quot;4550&quot;, &quot;28466&quot;, &quot;83&quot;, &quot;41&quot;, &quot;21449&quot;, … ## $ P3YM_HLI &lt;chr&gt; &quot;7364645&quot;, &quot;26486&quot;, &quot;18640&quot;, &quot;2539&quot;, &quot;20&quot;, &quot;14&quot;, &quot;1839&quot;, &quot;… ## $ P3YM_HLI_F &lt;chr&gt; &quot;3783447&quot;, &quot;10908&quot;, &quot;8181&quot;, &quot;1043&quot;, &quot;3&quot;, &quot;3&quot;, &quot;754&quot;, &quot;704&quot;… ## $ P3YM_HLI_M &lt;chr&gt; &quot;3581198&quot;, &quot;15578&quot;, &quot;10459&quot;, &quot;1496&quot;, &quot;17&quot;, &quot;11&quot;, &quot;1085&quot;, &quot;… ## $ P3HLINHE &lt;chr&gt; &quot;865972&quot;, &quot;2712&quot;, &quot;3098&quot;, &quot;25&quot;, &quot;0&quot;, &quot;0&quot;, &quot;8&quot;, &quot;6&quot;, &quot;*&quot;, &quot;… ## $ P3HLINHE_F &lt;chr&gt; &quot;547528&quot;, &quot;1652&quot;, &quot;1901&quot;, &quot;13&quot;, &quot;0&quot;, &quot;0&quot;, &quot;4&quot;, &quot;4&quot;, &quot;*&quot;, &quot;… ## $ P3HLINHE_M &lt;chr&gt; &quot;318444&quot;, &quot;1060&quot;, &quot;1197&quot;, &quot;12&quot;, &quot;0&quot;, &quot;0&quot;, &quot;4&quot;, &quot;2&quot;, &quot;*&quot;, &quot;… ## $ P3HLI_HE &lt;chr&gt; &quot;6423548&quot;, &quot;22906&quot;, &quot;14758&quot;, &quot;2461&quot;, &quot;15&quot;, &quot;6&quot;, &quot;1792&quot;, &quot;1… ## $ P3HLI_HE_F &lt;chr&gt; &quot;3198595&quot;, &quot;9203&quot;, &quot;6205&quot;, &quot;1012&quot;, &quot;3&quot;, &quot;3&quot;, &quot;737&quot;, &quot;688&quot;,… ## $ P3HLI_HE_M &lt;chr&gt; &quot;3224953&quot;, &quot;13703&quot;, &quot;8553&quot;, &quot;1449&quot;, &quot;12&quot;, &quot;3&quot;, &quot;1055&quot;, &quot;99… ## $ P5_HLI &lt;chr&gt; &quot;7177185&quot;, &quot;25743&quot;, &quot;17992&quot;, &quot;2508&quot;, &quot;20&quot;, &quot;14&quot;, &quot;1822&quot;, &quot;… ## $ P5_HLI_NHE &lt;chr&gt; &quot;785361&quot;, &quot;2412&quot;, &quot;2742&quot;, &quot;22&quot;, &quot;0&quot;, &quot;0&quot;, &quot;8&quot;, &quot;6&quot;, &quot;*&quot;, &quot;… ## $ P5_HLI_HE &lt;chr&gt; &quot;6317027&quot;, &quot;22464&quot;, &quot;14467&quot;, &quot;2437&quot;, &quot;15&quot;, &quot;6&quot;, &quot;1776&quot;, &quot;1… ## $ PHOG_IND &lt;chr&gt; &quot;11800247&quot;, &quot;27252&quot;, &quot;21531&quot;, &quot;5552&quot;, &quot;5&quot;, &quot;7&quot;, &quot;4050&quot;, &quot;3… ## $ POB_AFRO &lt;chr&gt; &quot;2576213&quot;, &quot;4122&quot;, &quot;2816&quot;, &quot;22425&quot;, &quot;52&quot;, &quot;32&quot;, &quot;15170&quot;, &quot;… ## $ POB_AFRO_F &lt;chr&gt; &quot;1297617&quot;, &quot;1614&quot;, &quot;1056&quot;, &quot;11211&quot;, &quot;20&quot;, &quot;11&quot;, &quot;7560&quot;, &quot;7… ## $ POB_AFRO_M &lt;chr&gt; &quot;1278596&quot;, &quot;2508&quot;, &quot;1760&quot;, &quot;11214&quot;, &quot;32&quot;, &quot;21&quot;, &quot;7610&quot;, &quot;7… ## $ PCON_DISC &lt;chr&gt; &quot;6179890&quot;, &quot;12126&quot;, &quot;8058&quot;, &quot;71294&quot;, &quot;212&quot;, &quot;123&quot;, &quot;47525&quot;… ## $ PCDISC_MOT &lt;chr&gt; &quot;2939986&quot;, &quot;5875&quot;, &quot;4079&quot;, &quot;34507&quot;, &quot;110&quot;, &quot;67&quot;, &quot;23117&quot;, … ## $ PCDISC_VIS &lt;chr&gt; &quot;2691338&quot;, &quot;5008&quot;, &quot;3590&quot;, &quot;29888&quot;, &quot;69&quot;, &quot;35&quot;, &quot;20047&quot;, &quot;… ## $ PCDISC_LENG &lt;chr&gt; &quot;945162&quot;, &quot;1940&quot;, &quot;1664&quot;, &quot;9297&quot;, &quot;18&quot;, &quot;7&quot;, &quot;5894&quot;, &quot;5317… ## $ PCDISC_AUD &lt;chr&gt; &quot;1350802&quot;, &quot;2895&quot;, &quot;2295&quot;, &quot;12989&quot;, &quot;39&quot;, &quot;27&quot;, &quot;8636&quot;, &quot;7… ## $ PCDISC_MOT2 &lt;chr&gt; &quot;1168098&quot;, &quot;2123&quot;, &quot;1808&quot;, &quot;12726&quot;, &quot;38&quot;, &quot;13&quot;, &quot;8226&quot;, &quot;7… ## $ PCDISC_MEN &lt;chr&gt; &quot;1149257&quot;, &quot;2179&quot;, &quot;1825&quot;, &quot;12967&quot;, &quot;27&quot;, &quot;12&quot;, &quot;8618&quot;, &quot;7… ## $ PCON_LIMI &lt;chr&gt; &quot;13934448&quot;, &quot;28067&quot;, &quot;16685&quot;, &quot;165482&quot;, &quot;418&quot;, &quot;290&quot;, &quot;116… ## $ PCLIM_CSB &lt;chr&gt; &quot;4365234&quot;, &quot;10653&quot;, &quot;6309&quot;, &quot;49636&quot;, &quot;161&quot;, &quot;109&quot;, &quot;34873&quot;… ## $ PCLIM_VIS &lt;chr&gt; &quot;8974853&quot;, &quot;17059&quot;, &quot;10523&quot;, &quot;103289&quot;, &quot;226&quot;, &quot;159&quot;, &quot;7366… ## $ PCLIM_HACO &lt;chr&gt; &quot;864662&quot;, &quot;2092&quot;, &quot;1279&quot;, &quot;8940&quot;, &quot;30&quot;, &quot;16&quot;, &quot;5980&quot;, &quot;539… ## $ PCLIM_OAUD &lt;chr&gt; &quot;2900108&quot;, &quot;6916&quot;, &quot;3982&quot;, &quot;30298&quot;, &quot;75&quot;, &quot;53&quot;, &quot;21547&quot;, &quot;… ## $ PCLIM_MOT2 &lt;chr&gt; &quot;673540&quot;, &quot;1625&quot;, &quot;1085&quot;, &quot;6368&quot;, &quot;24&quot;, &quot;13&quot;, &quot;4413&quot;, &quot;399… ## $ PCLIM_RE_CO &lt;chr&gt; &quot;2698640&quot;, &quot;5763&quot;, &quot;3479&quot;, &quot;34556&quot;, &quot;95&quot;, &quot;62&quot;, &quot;24523&quot;, &quot;… ## $ PCLIM_PMEN &lt;chr&gt; &quot;1590583&quot;, &quot;2823&quot;, &quot;1579&quot;, &quot;20169&quot;, &quot;56&quot;, &quot;31&quot;, &quot;13945&quot;, &quot;… ## $ PSIND_LIM &lt;chr&gt; &quot;104815785&quot;, &quot;207052&quot;, &quot;120888&quot;, &quot;1177938&quot;, &quot;3044&quot;, &quot;2590&quot;… ## $ P3A5_NOA &lt;chr&gt; &quot;2359716&quot;, &quot;5620&quot;, &quot;3783&quot;, &quot;31495&quot;, &quot;84&quot;, &quot;57&quot;, &quot;18639&quot;, &quot;… ## $ P3A5_NOA_F &lt;chr&gt; &quot;1155636&quot;, &quot;2689&quot;, &quot;1873&quot;, &quot;15371&quot;, &quot;36&quot;, &quot;26&quot;, &quot;9130&quot;, &quot;8… ## $ P3A5_NOA_M &lt;chr&gt; &quot;1204080&quot;, &quot;2931&quot;, &quot;1910&quot;, &quot;16124&quot;, &quot;48&quot;, &quot;31&quot;, &quot;9509&quot;, &quot;8… ## $ P6A11_NOA &lt;chr&gt; &quot;577029&quot;, &quot;2920&quot;, &quot;1782&quot;, &quot;4941&quot;, &quot;25&quot;, &quot;6&quot;, &quot;2877&quot;, &quot;2525… ## $ P6A11_NOAF &lt;chr&gt; &quot;275189&quot;, &quot;1403&quot;, &quot;874&quot;, &quot;2292&quot;, &quot;17&quot;, &quot;3&quot;, &quot;1360&quot;, &quot;1183&quot;… ## $ P6A11_NOAM &lt;chr&gt; &quot;301840&quot;, &quot;1517&quot;, &quot;908&quot;, &quot;2649&quot;, &quot;8&quot;, &quot;3&quot;, &quot;1517&quot;, &quot;1342&quot;,… ## $ P12A14NOA &lt;chr&gt; &quot;618233&quot;, &quot;2699&quot;, &quot;1674&quot;, &quot;6812&quot;, &quot;34&quot;, &quot;13&quot;, &quot;3907&quot;, &quot;341… ## $ P12A14NOAF &lt;chr&gt; &quot;283195&quot;, &quot;1190&quot;, &quot;766&quot;, &quot;2901&quot;, &quot;16&quot;, &quot;7&quot;, &quot;1671&quot;, &quot;1467&quot;… ## $ P12A14NOAM &lt;chr&gt; &quot;335038&quot;, &quot;1509&quot;, &quot;908&quot;, &quot;3911&quot;, &quot;18&quot;, &quot;6&quot;, &quot;2236&quot;, &quot;1948&quot;… ## $ P15A17A &lt;chr&gt; &quot;4726359&quot;, &quot;4952&quot;, &quot;3557&quot;, &quot;55493&quot;, &quot;133&quot;, &quot;56&quot;, &quot;36490&quot;, … ## $ P15A17A_F &lt;chr&gt; &quot;2390407&quot;, &quot;2386&quot;, &quot;1509&quot;, &quot;28286&quot;, &quot;53&quot;, &quot;22&quot;, &quot;18550&quot;, &quot;… ## $ P15A17A_M &lt;chr&gt; &quot;2335952&quot;, &quot;2566&quot;, &quot;2048&quot;, &quot;27207&quot;, &quot;80&quot;, &quot;34&quot;, &quot;17940&quot;, &quot;… ## $ P18A24A &lt;chr&gt; &quot;4894125&quot;, &quot;4157&quot;, &quot;2738&quot;, &quot;59978&quot;, &quot;93&quot;, &quot;77&quot;, &quot;44885&quot;, &quot;… ## $ P18A24A_F &lt;chr&gt; &quot;2482980&quot;, &quot;1610&quot;, &quot;1053&quot;, &quot;31114&quot;, &quot;33&quot;, &quot;23&quot;, &quot;23031&quot;, &quot;… ## $ P18A24A_M &lt;chr&gt; &quot;2411145&quot;, &quot;2547&quot;, &quot;1685&quot;, &quot;28864&quot;, &quot;60&quot;, &quot;54&quot;, &quot;21854&quot;, &quot;… ## $ P8A14AN &lt;chr&gt; &quot;412725&quot;, &quot;2393&quot;, &quot;1527&quot;, &quot;3178&quot;, &quot;19&quot;, &quot;7&quot;, &quot;1851&quot;, &quot;1609… ## $ P8A14AN_F &lt;chr&gt; &quot;178152&quot;, &quot;1080&quot;, &quot;712&quot;, &quot;1318&quot;, &quot;10&quot;, &quot;4&quot;, &quot;772&quot;, &quot;683&quot;, … ## $ P8A14AN_M &lt;chr&gt; &quot;234573&quot;, &quot;1313&quot;, &quot;815&quot;, &quot;1860&quot;, &quot;9&quot;, &quot;3&quot;, &quot;1079&quot;, &quot;926&quot;, … ## $ P15YM_AN &lt;chr&gt; &quot;4456431&quot;, &quot;24331&quot;, &quot;15092&quot;, &quot;21908&quot;, &quot;180&quot;, &quot;113&quot;, &quot;11618… ## $ P15YM_AN_F &lt;chr&gt; &quot;2677192&quot;, &quot;10532&quot;, &quot;7074&quot;, &quot;11762&quot;, &quot;78&quot;, &quot;41&quot;, &quot;6599&quot;, &quot;… ## $ P15YM_AN_M &lt;chr&gt; &quot;1779239&quot;, &quot;13799&quot;, &quot;8018&quot;, &quot;10146&quot;, &quot;102&quot;, &quot;72&quot;, &quot;5019&quot;, … ## $ P15YM_SE &lt;chr&gt; &quot;4841952&quot;, &quot;28014&quot;, &quot;17660&quot;, &quot;25567&quot;, &quot;209&quot;, &quot;119&quot;, &quot;14576… ## $ P15YM_SE_F &lt;chr&gt; &quot;2791237&quot;, &quot;11278&quot;, &quot;7476&quot;, &quot;13286&quot;, &quot;79&quot;, &quot;43&quot;, &quot;7917&quot;, &quot;… ## $ P15YM_SE_M &lt;chr&gt; &quot;2050715&quot;, &quot;16736&quot;, &quot;10184&quot;, &quot;12281&quot;, &quot;130&quot;, &quot;76&quot;, &quot;6659&quot;,… ## $ P15PRI_IN &lt;chr&gt; &quot;7731820&quot;, &quot;38545&quot;, &quot;21620&quot;, &quot;65609&quot;, &quot;378&quot;, &quot;301&quot;, &quot;33308… ## $ P15PRI_INF &lt;chr&gt; &quot;4042527&quot;, &quot;13056&quot;, &quot;8064&quot;, &quot;33542&quot;, &quot;152&quot;, &quot;86&quot;, &quot;18056&quot;,… ## $ P15PRI_INM &lt;chr&gt; &quot;3689293&quot;, &quot;25489&quot;, &quot;13556&quot;, &quot;32067&quot;, &quot;226&quot;, &quot;215&quot;, &quot;15252… ## $ P15PRI_CO &lt;chr&gt; &quot;12325433&quot;, &quot;38809&quot;, &quot;22033&quot;, &quot;122405&quot;, &quot;470&quot;, &quot;409&quot;, &quot;762… ## $ P15PRI_COF &lt;chr&gt; &quot;6515268&quot;, &quot;14762&quot;, &quot;9009&quot;, &quot;64730&quot;, &quot;207&quot;, &quot;132&quot;, &quot;41402&quot;… ## $ P15PRI_COM &lt;chr&gt; &quot;5810165&quot;, &quot;24047&quot;, &quot;13024&quot;, &quot;57675&quot;, &quot;263&quot;, &quot;277&quot;, &quot;34854… ## $ P15SEC_IN &lt;chr&gt; &quot;2913915&quot;, &quot;14833&quot;, &quot;5040&quot;, &quot;30347&quot;, &quot;157&quot;, &quot;145&quot;, &quot;19144&quot;… ## $ P15SEC_INF &lt;chr&gt; &quot;1297269&quot;, &quot;3143&quot;, &quot;1561&quot;, &quot;12806&quot;, &quot;37&quot;, &quot;27&quot;, &quot;8184&quot;, &quot;7… ## $ P15SEC_INM &lt;chr&gt; &quot;1616646&quot;, &quot;11690&quot;, &quot;3479&quot;, &quot;17541&quot;, &quot;120&quot;, &quot;118&quot;, &quot;10960&quot;… ## $ P15SEC_CO &lt;chr&gt; &quot;22833912&quot;, &quot;40180&quot;, &quot;24056&quot;, &quot;288036&quot;, &quot;832&quot;, &quot;807&quot;, &quot;182… ## $ P15SEC_COF &lt;chr&gt; &quot;11857736&quot;, &quot;15578&quot;, &quot;9485&quot;, &quot;151759&quot;, &quot;291&quot;, &quot;220&quot;, &quot;9543… ## $ P15SEC_COM &lt;chr&gt; &quot;10976176&quot;, &quot;24602&quot;, &quot;14571&quot;, &quot;136277&quot;, &quot;541&quot;, &quot;587&quot;, &quot;871… ## $ P18YM_PB &lt;chr&gt; &quot;39977750&quot;, &quot;33907&quot;, &quot;19102&quot;, &quot;467249&quot;, &quot;722&quot;, &quot;617&quot;, &quot;354… ## $ P18YM_PB_F &lt;chr&gt; &quot;20408275&quot;, &quot;11972&quot;, &quot;7672&quot;, &quot;240419&quot;, &quot;289&quot;, &quot;211&quot;, &quot;1818… ## $ P18YM_PB_M &lt;chr&gt; &quot;19569475&quot;, &quot;21935&quot;, &quot;11430&quot;, &quot;226830&quot;, &quot;433&quot;, &quot;406&quot;, &quot;172… ## $ GRAPROES &lt;chr&gt; &quot;9.74&quot;, &quot;6.5&quot;, &quot;6.45&quot;, &quot;10.35&quot;, &quot;8.14&quot;, &quot;8.37&quot;, &quot;10.84&quot;, &quot;… ## $ GRAPROES_F &lt;chr&gt; &quot;9.64&quot;, &quot;6.51&quot;, &quot;6.48&quot;, &quot;10.32&quot;, &quot;8.2&quot;, &quot;8.53&quot;, &quot;10.75&quot;, &quot;… ## $ GRAPROES_M &lt;chr&gt; &quot;9.84&quot;, &quot;6.5&quot;, &quot;6.43&quot;, &quot;10.38&quot;, &quot;8.11&quot;, &quot;8.3&quot;, &quot;10.93&quot;, &quot;1… ## $ PEA &lt;chr&gt; &quot;62281634&quot;, &quot;128289&quot;, &quot;68904&quot;, &quot;706930&quot;, &quot;2077&quot;, &quot;1748&quot;, &quot;… ## $ PEA_F &lt;chr&gt; &quot;25465693&quot;, &quot;33067&quot;, &quot;18475&quot;, &quot;293533&quot;, &quot;506&quot;, &quot;363&quot;, &quot;208… ## $ PEA_M &lt;chr&gt; &quot;36815941&quot;, &quot;95222&quot;, &quot;50429&quot;, &quot;413397&quot;, &quot;1571&quot;, &quot;1385&quot;, &quot;2… ## $ PE_INAC &lt;chr&gt; &quot;37891261&quot;, &quot;68766&quot;, &quot;46162&quot;, &quot;407903&quot;, &quot;939&quot;, &quot;801&quot;, &quot;269… ## $ PE_INAC_F &lt;chr&gt; &quot;26379060&quot;, &quot;42827&quot;, &quot;28959&quot;, &quot;282320&quot;, &quot;673&quot;, &quot;435&quot;, &quot;182… ## $ PE_INAC_M &lt;chr&gt; &quot;11512201&quot;, &quot;25939&quot;, &quot;17203&quot;, &quot;125583&quot;, &quot;266&quot;, &quot;366&quot;, &quot;862… ## $ POCUPADA &lt;chr&gt; &quot;61121324&quot;, &quot;127469&quot;, &quot;68215&quot;, &quot;692983&quot;, &quot;2060&quot;, &quot;1741&quot;, &quot;… ## $ POCUPADA_F &lt;chr&gt; &quot;25137019&quot;, &quot;32906&quot;, &quot;18365&quot;, &quot;289268&quot;, &quot;497&quot;, &quot;361&quot;, &quot;205… ## $ POCUPADA_M &lt;chr&gt; &quot;35984305&quot;, &quot;94563&quot;, &quot;49850&quot;, &quot;403715&quot;, &quot;1563&quot;, &quot;1380&quot;, &quot;2… ## $ PDESOCUP &lt;chr&gt; &quot;1160310&quot;, &quot;820&quot;, &quot;689&quot;, &quot;13947&quot;, &quot;17&quot;, &quot;7&quot;, &quot;10173&quot;, &quot;949… ## $ PDESOCUP_F &lt;chr&gt; &quot;328674&quot;, &quot;161&quot;, &quot;110&quot;, &quot;4265&quot;, &quot;9&quot;, &quot;2&quot;, &quot;3386&quot;, &quot;3224&quot;, … ## $ PDESOCUP_M &lt;chr&gt; &quot;831636&quot;, &quot;659&quot;, &quot;579&quot;, &quot;9682&quot;, &quot;8&quot;, &quot;5&quot;, &quot;6787&quot;, &quot;6274&quot;, … ## $ PSINDER &lt;chr&gt; &quot;32999713&quot;, &quot;86676&quot;, &quot;56232&quot;, &quot;262088&quot;, &quot;1067&quot;, &quot;1289&quot;, &quot;1… ## $ PDER_SS &lt;chr&gt; &quot;92582812&quot;, &quot;153663&quot;, &quot;90057&quot;, &quot;1161139&quot;, &quot;2472&quot;, &quot;1730&quot;, … ## $ PDER_IMSS &lt;chr&gt; &quot;47245909&quot;, &quot;53559&quot;, &quot;23569&quot;, &quot;780525&quot;, &quot;1090&quot;, &quot;828&quot;, &quot;57… ## $ PDER_ISTE &lt;chr&gt; &quot;7165164&quot;, &quot;3795&quot;, &quot;2312&quot;, &quot;92771&quot;, &quot;113&quot;, &quot;87&quot;, &quot;65237&quot;, … ## $ PDER_ISTEE &lt;chr&gt; &quot;1041534&quot;, &quot;552&quot;, &quot;350&quot;, &quot;3786&quot;, &quot;4&quot;, &quot;9&quot;, &quot;2352&quot;, &quot;2243&quot;,… ## $ PAFIL_PDOM &lt;chr&gt; &quot;1192255&quot;, &quot;649&quot;, &quot;485&quot;, &quot;3196&quot;, &quot;0&quot;, &quot;1&quot;, &quot;2563&quot;, &quot;2494&quot;,… ## $ PDER_SEGP &lt;chr&gt; &quot;32842765&quot;, &quot;84849&quot;, &quot;59445&quot;, &quot;271996&quot;, &quot;1242&quot;, &quot;775&quot;, &quot;12… ## $ PDER_IMSSB &lt;chr&gt; &quot;958787&quot;, &quot;2883&quot;, &quot;1956&quot;, &quot;1680&quot;, &quot;2&quot;, &quot;1&quot;, &quot;1064&quot;, &quot;969&quot;,… ## $ PAFIL_IPRIV &lt;chr&gt; &quot;2615213&quot;, &quot;3288&quot;, &quot;1300&quot;, &quot;31789&quot;, &quot;31&quot;, &quot;20&quot;, &quot;25703&quot;, &quot;… ## $ PAFIL_OTRAI &lt;chr&gt; &quot;1149542&quot;, &quot;6284&quot;, &quot;1504&quot;, &quot;3179&quot;, &quot;13&quot;, &quot;25&quot;, &quot;2346&quot;, &quot;21… ## $ P12YM_SOLT &lt;chr&gt; &quot;34370381&quot;, &quot;63913&quot;, &quot;38355&quot;, &quot;402370&quot;, &quot;1037&quot;, &quot;787&quot;, &quot;27… ## $ P12YM_CASA &lt;chr&gt; &quot;54036478&quot;, &quot;124916&quot;, &quot;68874&quot;, &quot;593273&quot;, &quot;1695&quot;, &quot;1454&quot;, &quot;… ## $ P12YM_SEPA &lt;chr&gt; &quot;12049313&quot;, &quot;18433&quot;, &quot;10660&quot;, &quot;120740&quot;, &quot;285&quot;, &quot;312&quot;, &quot;873… ## $ PCATOLICA &lt;chr&gt; &quot;97864218&quot;, &quot;187464&quot;, &quot;112351&quot;, &quot;1272419&quot;, &quot;3250&quot;, &quot;2732&quot;,… ## $ PRO_CRIEVA &lt;chr&gt; &quot;14095307&quot;, &quot;29725&quot;, &quot;16630&quot;, &quot;73359&quot;, &quot;223&quot;, &quot;95&quot;, &quot;55328… ## $ POTRAS_REL &lt;chr&gt; &quot;248169&quot;, &quot;1117&quot;, &quot;675&quot;, &quot;1900&quot;, &quot;11&quot;, &quot;22&quot;, &quot;1539&quot;, &quot;1457… ## $ PSIN_RELIG &lt;chr&gt; &quot;13314516&quot;, &quot;29624&quot;, &quot;16432&quot;, &quot;74439&quot;, &quot;195&quot;, &quot;169&quot;, &quot;5853… ## $ TOTHOG &lt;chr&gt; &quot;35219141&quot;, &quot;62516&quot;, &quot;36568&quot;, &quot;386445&quot;, &quot;807&quot;, &quot;516&quot;, &quot;266… ## $ HOGJEF_F &lt;chr&gt; &quot;11474983&quot;, &quot;8292&quot;, &quot;6620&quot;, &quot;119453&quot;, &quot;123&quot;, &quot;100&quot;, &quot;85732… ## $ HOGJEF_M &lt;chr&gt; &quot;23744158&quot;, &quot;54224&quot;, &quot;29948&quot;, &quot;266992&quot;, &quot;684&quot;, &quot;416&quot;, &quot;181… ## $ POBHOG &lt;chr&gt; &quot;125514839&quot;, &quot;198544&quot;, &quot;125099&quot;, &quot;1421200&quot;, &quot;3137&quot;, &quot;1918&quot;… ## $ PHOGJEF_F &lt;chr&gt; &quot;37418569&quot;, &quot;28805&quot;, &quot;21860&quot;, &quot;395735&quot;, &quot;532&quot;, &quot;385&quot;, &quot;273… ## $ PHOGJEF_M &lt;chr&gt; &quot;88096270&quot;, &quot;169739&quot;, &quot;103239&quot;, &quot;1025465&quot;, &quot;2605&quot;, &quot;1533&quot;,… ## $ VIVTOT &lt;dbl&gt; 43903443, 101390, 61435, 463972, 1368, 869, 313256, 286646… ## $ TVIVHAB &lt;dbl&gt; 35233462, 62767, 36676, 386671, 813, 518, 266942, 246259, … ## $ TVIVPAR &lt;chr&gt; &quot;42300700&quot;, &quot;99591&quot;, &quot;60317&quot;, &quot;453099&quot;, &quot;1354&quot;, &quot;858&quot;, &quot;30… ## $ VIVPAR_HAB &lt;chr&gt; &quot;33630719&quot;, &quot;60968&quot;, &quot;35558&quot;, &quot;375798&quot;, &quot;799&quot;, &quot;507&quot;, &quot;257… ## $ VIVPARH_CV &lt;chr&gt; &quot;35156897&quot;, &quot;62091&quot;, &quot;36359&quot;, &quot;386011&quot;, &quot;801&quot;, &quot;516&quot;, &quot;266… ## $ TVIVPARHAB &lt;chr&gt; &quot;35219141&quot;, &quot;62516&quot;, &quot;36568&quot;, &quot;386445&quot;, &quot;807&quot;, &quot;516&quot;, &quot;266… ## $ VIVPAR_DES &lt;chr&gt; &quot;6155682&quot;, &quot;18117&quot;, &quot;12225&quot;, &quot;60327&quot;, &quot;233&quot;, &quot;164&quot;, &quot;37113… ## $ VIVPAR_UT &lt;chr&gt; &quot;2514299&quot;, &quot;20506&quot;, &quot;12534&quot;, &quot;16974&quot;, &quot;322&quot;, &quot;187&quot;, &quot;9201&quot;… ## $ OCUPVIVPAR &lt;chr&gt; &quot;125514839&quot;, &quot;198544&quot;, &quot;125099&quot;, &quot;1421200&quot;, &quot;3137&quot;, &quot;1918&quot;… ## $ PROM_OCUP &lt;chr&gt; &quot;3.56&quot;, &quot;3.18&quot;, &quot;3.42&quot;, &quot;3.68&quot;, &quot;3.89&quot;, &quot;3.72&quot;, &quot;3.54&quot;, &quot;3… ## $ PRO_OCUP_C &lt;chr&gt; &quot;0.96&quot;, &quot;1.03&quot;, &quot;1.03&quot;, &quot;0.89&quot;, &quot;1.02&quot;, &quot;1.03&quot;, &quot;0.84&quot;, &quot;0… ## $ VPH_PISODT &lt;chr&gt; &quot;33833470&quot;, &quot;53169&quot;, &quot;29302&quot;, &quot;382634&quot;, &quot;771&quot;, &quot;499&quot;, &quot;264… ## $ VPH_PISOTI &lt;chr&gt; &quot;1235550&quot;, &quot;8797&quot;, &quot;6891&quot;, &quot;2899&quot;, &quot;30&quot;, &quot;17&quot;, &quot;1530&quot;, &quot;10… ## $ VPH_1DOR &lt;chr&gt; &quot;11186214&quot;, &quot;30115&quot;, &quot;17038&quot;, &quot;86423&quot;, &quot;270&quot;, &quot;175&quot;, &quot;5543… ## $ VPH_2YMASD &lt;chr&gt; &quot;23887498&quot;, &quot;31851&quot;, &quot;19157&quot;, &quot;299141&quot;, &quot;531&quot;, &quot;341&quot;, &quot;210… ## $ VPH_1CUART &lt;chr&gt; &quot;2085925&quot;, &quot;7333&quot;, &quot;4351&quot;, &quot;6390&quot;, &quot;39&quot;, &quot;27&quot;, &quot;3185&quot;, &quot;24… ## $ VPH_2CUART &lt;chr&gt; &quot;5460133&quot;, &quot;16206&quot;, &quot;9491&quot;, &quot;30686&quot;, &quot;116&quot;, &quot;85&quot;, &quot;17449&quot;,… ## $ VPH_3YMASC &lt;chr&gt; &quot;27527131&quot;, &quot;38424&quot;, &quot;22351&quot;, &quot;348487&quot;, &quot;646&quot;, &quot;404&quot;, &quot;245… ## $ VPH_C_ELEC &lt;chr&gt; &quot;34805976&quot;, &quot;48426&quot;, &quot;28586&quot;, &quot;384361&quot;, &quot;723&quot;, &quot;477&quot;, &quot;265… ## $ VPH_S_ELEC &lt;chr&gt; &quot;268863&quot;, &quot;13538&quot;, &quot;7607&quot;, &quot;1210&quot;, &quot;78&quot;, &quot;39&quot;, &quot;438&quot;, &quot;300… ## $ VPH_AGUADV &lt;chr&gt; &quot;33858339&quot;, &quot;45470&quot;, &quot;26499&quot;, &quot;383430&quot;, &quot;694&quot;, &quot;463&quot;, &quot;265… ## $ VPH_AEASP &lt;chr&gt; &quot;29541708&quot;, &quot;8198&quot;, &quot;5054&quot;, &quot;355192&quot;, &quot;195&quot;, &quot;136&quot;, &quot;25415… ## $ VPH_AGUAFV &lt;chr&gt; &quot;1215497&quot;, &quot;16498&quot;, &quot;9696&quot;, &quot;2137&quot;, &quot;107&quot;, &quot;53&quot;, &quot;989&quot;, &quot;3… ## $ VPH_TINACO &lt;chr&gt; &quot;22629812&quot;, &quot;34143&quot;, &quot;18089&quot;, &quot;295903&quot;, &quot;608&quot;, &quot;361&quot;, &quot;199… ## $ VPH_CISTER &lt;chr&gt; &quot;9652823&quot;, &quot;13743&quot;, &quot;7029&quot;, &quot;152521&quot;, &quot;405&quot;, &quot;241&quot;, &quot;12280… ## $ VPH_EXCSA &lt;chr&gt; &quot;33081729&quot;, &quot;44688&quot;, &quot;24348&quot;, &quot;382597&quot;, &quot;708&quot;, &quot;455&quot;, &quot;265… ## $ VPH_LETR &lt;chr&gt; &quot;1396774&quot;, &quot;9825&quot;, &quot;6050&quot;, &quot;1011&quot;, &quot;27&quot;, &quot;19&quot;, &quot;520&quot;, &quot;60&quot;… ## $ VPH_DRENAJ &lt;chr&gt; &quot;33564054&quot;, &quot;47253&quot;, &quot;26036&quot;, &quot;383148&quot;, &quot;719&quot;, &quot;459&quot;, &quot;265… ## $ VPH_NODREN &lt;chr&gt; &quot;1498766&quot;, &quot;14708&quot;, &quot;10155&quot;, &quot;2379&quot;, &quot;82&quot;, &quot;57&quot;, &quot;798&quot;, &quot;1… ## $ VPH_C_SERV &lt;chr&gt; &quot;32671764&quot;, &quot;35091&quot;, &quot;19807&quot;, &quot;380982&quot;, &quot;610&quot;, &quot;418&quot;, &quot;264… ## $ VPH_NDEAED &lt;chr&gt; &quot;79584&quot;, &quot;4842&quot;, &quot;2935&quot;, &quot;184&quot;, &quot;16&quot;, &quot;10&quot;, &quot;53&quot;, &quot;19&quot;, &quot;*… ## $ VPH_DSADMA &lt;chr&gt; &quot;32979844&quot;, &quot;43668&quot;, &quot;23841&quot;, &quot;382121&quot;, &quot;704&quot;, &quot;445&quot;, &quot;264… ## $ VPH_NDACMM &lt;chr&gt; &quot;16874580&quot;, &quot;24373&quot;, &quot;16122&quot;, &quot;130744&quot;, &quot;203&quot;, &quot;119&quot;, &quot;883… ## $ VPH_SNBIEN &lt;chr&gt; &quot;581095&quot;, &quot;5136&quot;, &quot;4115&quot;, &quot;876&quot;, &quot;12&quot;, &quot;8&quot;, &quot;380&quot;, &quot;313&quot;, … ## $ VPH_REFRI &lt;chr&gt; &quot;30811260&quot;, &quot;38199&quot;, &quot;21775&quot;, &quot;365189&quot;, &quot;632&quot;, &quot;436&quot;, &quot;254… ## $ VPH_LAVAD &lt;chr&gt; &quot;25610544&quot;, &quot;26412&quot;, &quot;15880&quot;, &quot;335710&quot;, &quot;561&quot;, &quot;377&quot;, &quot;234… ## $ VPH_HMICRO &lt;chr&gt; &quot;16651199&quot;, &quot;13608&quot;, &quot;7902&quot;, &quot;238571&quot;, &quot;276&quot;, &quot;218&quot;, &quot;1760… ## $ VPH_AUTOM &lt;chr&gt; &quot;16340788&quot;, &quot;30940&quot;, &quot;16699&quot;, &quot;240381&quot;, &quot;529&quot;, &quot;343&quot;, &quot;169… ## $ VPH_MOTO &lt;chr&gt; &quot;4227460&quot;, &quot;15001&quot;, &quot;8076&quot;, &quot;45642&quot;, &quot;216&quot;, &quot;143&quot;, &quot;26624&quot;… ## $ VPH_BICI &lt;chr&gt; &quot;7469168&quot;, &quot;13600&quot;, &quot;6330&quot;, &quot;105752&quot;, &quot;407&quot;, &quot;241&quot;, &quot;54393… ## $ VPH_RADIO &lt;chr&gt; &quot;23772973&quot;, &quot;36738&quot;, &quot;20009&quot;, &quot;312002&quot;, &quot;650&quot;, &quot;405&quot;, &quot;221… ## $ VPH_TV &lt;chr&gt; &quot;32031555&quot;, &quot;40001&quot;, &quot;23198&quot;, &quot;370411&quot;, &quot;684&quot;, &quot;466&quot;, &quot;257… ## $ VPH_PC &lt;chr&gt; &quot;13204680&quot;, &quot;5797&quot;, &quot;3588&quot;, &quot;177149&quot;, &quot;167&quot;, &quot;114&quot;, &quot;13692… ## $ VPH_TELEF &lt;chr&gt; &quot;13184550&quot;, &quot;3523&quot;, &quot;2177&quot;, &quot;147818&quot;, &quot;43&quot;, &quot;37&quot;, &quot;116647&quot;… ## $ VPH_CEL &lt;chr&gt; &quot;30775898&quot;, &quot;47005&quot;, &quot;25581&quot;, &quot;359895&quot;, &quot;732&quot;, &quot;470&quot;, &quot;251… ## $ VPH_INTER &lt;chr&gt; &quot;18307193&quot;, &quot;8385&quot;, &quot;5027&quot;, &quot;236003&quot;, &quot;205&quot;, &quot;146&quot;, &quot;17861… ## $ VPH_STVP &lt;chr&gt; &quot;15211306&quot;, &quot;18981&quot;, &quot;11306&quot;, &quot;174089&quot;, &quot;212&quot;, &quot;156&quot;, &quot;130… ## $ VPH_SPMVPI &lt;chr&gt; &quot;6616141&quot;, &quot;1732&quot;, &quot;971&quot;, &quot;98724&quot;, &quot;48&quot;, &quot;35&quot;, &quot;80951&quot;, &quot;7… ## $ VPH_CVJ &lt;chr&gt; &quot;4047100&quot;, &quot;1113&quot;, &quot;708&quot;, &quot;70126&quot;, &quot;41&quot;, &quot;38&quot;, &quot;56131&quot;, &quot;5… ## $ VPH_SINRTV &lt;chr&gt; &quot;1788552&quot;, &quot;12775&quot;, &quot;8247&quot;, &quot;6021&quot;, &quot;39&quot;, &quot;25&quot;, &quot;3299&quot;, &quot;2… ## $ VPH_SINLTC &lt;chr&gt; &quot;3170894&quot;, &quot;14143&quot;, &quot;10065&quot;, &quot;15323&quot;, &quot;62&quot;, &quot;44&quot;, &quot;7293&quot;, … ## $ VPH_SINCINT &lt;chr&gt; &quot;15108204&quot;, &quot;51293&quot;, &quot;29741&quot;, &quot;128996&quot;, &quot;530&quot;, &quot;330&quot;, &quot;742… ## $ VPH_SINTIC &lt;chr&gt; &quot;852871&quot;, &quot;7154&quot;, &quot;5283&quot;, &quot;1711&quot;, &quot;20&quot;, &quot;11&quot;, &quot;731&quot;, &quot;595&quot;… ## $ TAMLOC &lt;chr&gt; &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;13&quot;, &quot;1&quot;, &quot;1&quot;, &quot;1&quot;, &quot;1… ¿Y si el archivo que necesitamos leer esta en excel? 3.5.2 Archivos xls y xlsx La paquetería readxl facilita la obtención de datos tabulares de archivos de Excel. Admite tanto el formato .xls heredado como el formato .xlsx moderno basado en XML. Esta paqueteía pone a disposición las siguientes funciones: read_xlsx() lee un archivo con extensión xlsx. read_excel() determina si el archivo es de tipo xls o xlsx para después llamar a una de las fuciones mencionadas anteriormente. EJERCICIO: Leer archivos propios en formato de Excel 3.6 Consulta de datos Ahora que ya sabemos como cargar datos, aprenderemos como manipularlos con dplyr. El paquete dplyr proporciona un conjunto de funciones muy útiles para manipular data frames y así reducir el número de repeticiones, la probabilidad de cometer errores y el número de caracteres que hay que escribir. Como valor extra, podemos encontrar que la gramática de dplyr es más fácil de entender. Revisaremos algunas de sus funciones más usadas (verbos), así como el uso de pipes (%&gt;%) para combinarlas. select() filter() arrange() mutate() summarise() join() group_by() Primero tenemos que instalar y cargar la paquetería (parte de tidyverse): library(dplyr) Usaremos el dataset iris que se encuentra en la paquetería datasets (el alumno puede hacer el ejercicio con la tabla de su elección) head(iris,10) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa 3.6.1 select() Observamos que nuestros datos tienen 150 observaciones y 5 variables, con select() podemos seleccionar las variables que le indiquemos. select_ejemplo&lt;-iris %&gt;% select(Sepal.Length,Petal.Length,Species) head(select_ejemplo,10) ## Sepal.Length Petal.Length Species ## 1 5.1 1.4 setosa ## 2 4.9 1.4 setosa ## 3 4.7 1.3 setosa ## 4 4.6 1.5 setosa ## 5 5.0 1.4 setosa ## 6 5.4 1.7 setosa ## 7 4.6 1.4 setosa ## 8 5.0 1.5 setosa ## 9 4.4 1.4 setosa ## 10 4.9 1.5 setosa ¡¡ RECORDAR !! El operador pipe (%&gt;%) se usa para conectar múltiples acciones En este caso solo le indicamos que en los datos de iris se seleccionan 3 varibles y se guarda este nuevo data frame en la variable select_ejemplo. Con select() y contains podemos seleccionar varibles con alguna cadena de texto. select_ejemplo &lt;- iris %&gt;% select(contains(&quot;Sepal&quot;)) head(select_ejemplo, 5) ## Sepal.Length Sepal.Width ## 1 5.1 3.5 ## 2 4.9 3.0 ## 3 4.7 3.2 ## 4 4.6 3.1 ## 5 5.0 3.6 De igual manera, con select(), ends_with y start_with() podemos seleccionar que inicien o terminen con alguna cadena de texto. select_ejemplo &lt;- iris %&gt;% select(starts_with(&quot;Sepal&quot;), ends_with(&quot;Length&quot;)) head(select_ejemplo, 5) ## Sepal.Length Sepal.Width Petal.Length ## 1 5.1 3.5 1.4 ## 2 4.9 3.0 1.4 ## 3 4.7 3.2 1.3 ## 4 4.6 3.1 1.5 ## 5 5.0 3.6 1.4 Funciones útiles para select(): contains(): Selecciona variables cuyo nombre contiene la cadena de texto. ends_with(): Selecciona variables cuyo nombre termina con la cadena de caracteres. everything(): Selecciona todas las columnas. matches(): Selecciona las variables cuyos nombres coinciden con una expresión regular. num_range(): Selecciona las variables por posición. start_with(): Selecciona variables cuyos nombres empiezan con la cadena de caracteres. any_of: Selecciona cualquiera de estas variables, en caso de existir 3.6.2 filter() La función filter nos permite filtrar filas según una condición, primero notemos que la variable Species tiene tres categorías. iris %&gt;% count(Species) ## Species n ## 1 setosa 50 ## 2 versicolor 50 ## 3 virginica 50 Ahora usaremos la función filter para quedarnos solo con las observaciones de la especie virginica. ejemplo_filter &lt;- iris %&gt;% filter(Species==&quot;virginica&quot;) head(ejemplo_filter, 5) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 6.3 3.3 6.0 2.5 virginica ## 2 5.8 2.7 5.1 1.9 virginica ## 3 7.1 3.0 5.9 2.1 virginica ## 4 6.3 2.9 5.6 1.8 virginica ## 5 6.5 3.0 5.8 2.2 virginica También se puede usar para filtrar variables numéricas: ejemplo_filter&lt;- iris %&gt;% filter(Sepal.Length &gt; 5 &amp; Sepal.Width &gt;= 3.5) head(ejemplo_filter, 5) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 5.4 3.9 1.7 0.4 setosa ## 3 5.4 3.7 1.5 0.2 setosa ## 4 5.8 4.0 1.2 0.2 setosa ## 5 5.7 4.4 1.5 0.4 setosa Notemos que en el ejemplo anterior usamos &amp;, que nos ayuda a filtrar por dos condiciones. También podemos usar | para filtrar por alguna de las dos condiciones. ejemplo_filter&lt;- iris %&gt;% filter(Sepal.Length&gt;5 | Sepal.Width&gt;=3.5) head(ejemplo_filter,5) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 5.0 3.6 1.4 0.2 setosa ## 3 5.4 3.9 1.7 0.4 setosa ## 4 5.4 3.7 1.5 0.2 setosa ## 5 5.8 4.0 1.2 0.2 setosa Las condiciones pueden ser expresiones lógicas construidas mediante los operadores relacionales y lógicos: &lt; : Menor que &gt; : Mayor que = : Igual que &lt;= : Menor o igual que &gt;= : Mayor o igual que != : Diferente que %in% : Pertenece al conjunto is.na : Es NA !is.na : No es NA 3.6.3 arrange() La función arrange() se utiliza para ordenar las filas de un data frame de acuerdo a una o varias variables. Por defecto arrange() ordena las filas por orden ascendente: ejemplo_arrange &lt;- iris %&gt;% arrange(Sepal.Length) head(ejemplo_arrange, 10) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 4.3 3.0 1.1 0.1 setosa ## 2 4.4 2.9 1.4 0.2 setosa ## 3 4.4 3.0 1.3 0.2 setosa ## 4 4.4 3.2 1.3 0.2 setosa ## 5 4.5 2.3 1.3 0.3 setosa ## 6 4.6 3.1 1.5 0.2 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 4.6 3.6 1.0 0.2 setosa ## 9 4.6 3.2 1.4 0.2 setosa ## 10 4.7 3.2 1.3 0.2 setosa Si las queremos ordenar de forma ascendente lo haremos del siguiente modo: ejemplo_arrange &lt;- iris %&gt;% arrange(desc(Sepal.Length)) head(ejemplo_arrange, 10) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 7.9 3.8 6.4 2.0 virginica ## 2 7.7 3.8 6.7 2.2 virginica ## 3 7.7 2.6 6.9 2.3 virginica ## 4 7.7 2.8 6.7 2.0 virginica ## 5 7.7 3.0 6.1 2.3 virginica ## 6 7.6 3.0 6.6 2.1 virginica ## 7 7.4 2.8 6.1 1.9 virginica ## 8 7.3 2.9 6.3 1.8 virginica ## 9 7.2 3.6 6.1 2.5 virginica ## 10 7.2 3.2 6.0 1.8 virginica 3.6.4 mutate() Con la función mutate() podemos computar tranformaciones de variables en un data frame. A menudo, tendremos la necesidad de crear nuevas variables que se calculan a partir de variables existentes,mutate() nos proporciona una interface clara para realizar este tipo de operaciones. Por ejemplo haremos la suma de las variables Sepal.Lenght y Sepal.Width: ejemplo_mutate &lt;- iris %&gt;% select(Sepal.Length, Sepal.Width) %&gt;% mutate(Suma = Sepal.Length + Sepal.Width) head(ejemplo_mutate, 5) ## Sepal.Length Sepal.Width Suma ## 1 5.1 3.5 8.6 ## 2 4.9 3.0 7.9 ## 3 4.7 3.2 7.9 ## 4 4.6 3.1 7.7 ## 5 5.0 3.6 8.6 ¡¡ RECORDAR !! Notemos que en el ejemplo anterior usamos dos pipes (%&gt;%). Como habiamos mencionado se pueden usar los pipes necesarios para combinar tareas. 3.6.5 summarise() La función summarise() funciona de forma análoga a la función mutate, excepto que en lugar de añadir nuevas columnas crea un nuevo data frame. Podemos usar el ejemplo anterior y calcular la media de la varible creada Suma: ejemplo_summarise &lt;- iris %&gt;% select(Sepal.Length, Sepal.Width) %&gt;% mutate(Suma = Sepal.Length + Sepal.Width) %&gt;% summarise(Media_Suma = mean(Suma)) ejemplo_summarise ## Media_Suma ## 1 8.900667 Solo fue necesario agregar un pipe, especificar el nombre de la varible creada y la operación a realizar. A continuación se muestran funciones que trabajando conjuntamente con la función summarise() facilitarán nuestro trabajo diario. Las primeras pertenecen al paquete base y las otras son del paquete dplyr. Todas ellas toman como argumento un vector y devuelven un único resultado: min(), max() : Valores max y min. mean() : Media. median() : Mediana. sum() : Suma de los valores. var(), sd() : Varianza y desviación estandar. first() : Primer valor en un vector. last() : El último valor en un vector n() : El número de valores en un vector. n_distinc() : El número de valores distintos en un vector. nth() : Extrar el valor que ocupa la posición n en un vector. Mas adelante veremos como combinar esta función con la función group_by. 3.6.6 group_by() La función group_by() agrupa un conjunto de filas seleccionado en un conjunto de filas de resumen de acuerdo con los valores de una o más columnas o expresiones. Usaremos el ejemplo anterior, primero creamos nuestra nueva variable Suma, despues agrupamos por especie y al final sacamos la media de la variable Suma pero esta vez, por la función group_by, nos regresara una media por cada grupo creado, es decir, nos regresara el promedio de la suma por especie. ejemplo_groupby &lt;- iris %&gt;% mutate(Suma = Sepal.Length + Sepal.Width) %&gt;% group_by(Species) %&gt;% summarise(Media_Suma = mean(Suma)) ejemplo_groupby ## # A tibble: 3 × 2 ## Species Media_Suma ## &lt;fct&gt; &lt;dbl&gt; ## 1 setosa 8.43 ## 2 versicolor 8.71 ## 3 virginica 9.56 3.6.7 left_join() Una operación fundamental por agregar a nuestro flujo de trabajo es el cruce de tablas, las cuales pueden proceder de la misma o de distinta fuente. Comúnmente este proceso se realiza para enriquecer y unificar la información proveniente de distintas tablas de datos. Para lograr esta tarea es indispensable que exista una variable llave en ambos conjuntos de datos que sirva como puente o identificador de cada caso o renglón. Si se cuenta con la columna llave entonces será posible cruzar las tablas y lograr su enriquecimiento. En el siguiente ejemplo se muestra el uso de la variable llave a través de la columna “ID.” Se puede apreciar que en la tabla final se cuenta con información de la variable “Weight” para los elementos que existen en las tablas “A” y “B.” La función que hace posible el complemento de la información es llamada left_join(). El primer argumento de la función corresponde al conjunto de datos que se desea complementar, mientras que en el segundo argumento se ingresa el conjunto de datos con la información que enriquecerá al primer conjunto. Es necesario especificar en el argumento “by” el nombre de la columna llave. conjuntoX &lt;- data.frame(&quot;Llave&quot; = LETTERS[1:8], &quot;C1&quot; = 1:8) conjuntoY &lt;- data.frame( &quot;Llave&quot; = sample(LETTERS[11:3], size = 9, replace = T), &quot;Ex1&quot; = letters[2:10], &quot;Ex2&quot; = 1002:1010, &quot;Ex3&quot; = paste0(letters[12:20],2:10) ) conjuntoX ## Llave C1 ## 1 A 1 ## 2 B 2 ## 3 C 3 ## 4 D 4 ## 5 E 5 ## 6 F 6 ## 7 G 7 ## 8 H 8 conjuntoY ## Llave Ex1 Ex2 Ex3 ## 1 K b 1002 l2 ## 2 I c 1003 m3 ## 3 D d 1004 n4 ## 4 H e 1005 o5 ## 5 J f 1006 p6 ## 6 E g 1007 q7 ## 7 E h 1008 r8 ## 8 D i 1009 s9 ## 9 J j 1010 t10 left_join(x = conjuntoX, y = conjuntoY, by = &quot;Llave&quot;) ## Llave C1 Ex1 Ex2 Ex3 ## 1 A 1 &lt;NA&gt; NA &lt;NA&gt; ## 2 B 2 &lt;NA&gt; NA &lt;NA&gt; ## 3 C 3 &lt;NA&gt; NA &lt;NA&gt; ## 4 D 4 d 1004 n4 ## 5 D 4 i 1009 s9 ## 6 E 5 g 1007 q7 ## 7 E 5 h 1008 r8 ## 8 F 6 &lt;NA&gt; NA &lt;NA&gt; ## 9 G 7 &lt;NA&gt; NA &lt;NA&gt; ## 10 H 8 e 1005 o5 Es posible que no todas las observaciones de un conjunto de datos estén en el otro conjunto, cuando esto sucede un aviso aparece indicando que los factores o categorías de la variable llave son diferentes. En caso de no encontrarse uno o más de los valores, el resultado para esos casos será NA (no disponible, por su traducción del inglés “Not Available”), y aparecerá siempre que no se cuente con información en un registro, como se muestra en el ejemplo anterior. "],["construcción-de-muestra.html", "Capítulo 4 Construcción de muestra 4.1 Marco de muestreo 4.2 Tamaño de muestra 4.3 Distribución muestral", " Capítulo 4 Construcción de muestra 4.1 Marco de muestreo El primer paso consiste en crear un marco de muestreo, el cual es el listado de los posibles elementos a ser seleccionados en la muestra. Tiene la característica de que todos los elementos deben pertenecer a la población objetivo. Este marco de muestreo podría llegar a tener los siguientes 3 errores: Duplicidad: Existen elementos repetidos Sobre-representatividad: Existen elementos en el marco que no pertenecen a la población objetivo Sub-representatividad: Existen elementos pertenecientes a la población objetivo que no se encuentran representados en el marco Ante estos problemas, es necesario realizar una limpieza de los datos disponibles para obtener un conjunto lo más adecuado para extraer estos problemas. A continuación se muestra el proceso de limpieza a seguir usando el software estadístico R. library(readr) library(dplyr) cnpv &lt;- read_csv(&quot;data/conjunto_de_datos_ageb_urbana_09_cpv2020.csv&quot;, na = c(&quot;&quot;, NA, &quot;*&quot;)) cnpv ## # A tibble: 68,941 × 230 ## ENTIDAD NOM_ENT MUN NOM_MUN LOC NOM_LOC AGEB MZA POBTOT POBFEM POBMAS ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 09 Ciudad … 000 Total … 0000 Total … 0000 000 9.21e6 4.81e6 4.40e6 ## 2 09 Ciudad … 002 Azcapo… 0000 Total … 0000 000 4.32e5 2.27e5 2.05e5 ## 3 09 Ciudad … 002 Azcapo… 0001 Total … 0000 000 4.32e5 2.27e5 2.05e5 ## 4 09 Ciudad … 002 Azcapo… 0001 Total … 0010 000 3.18e3 1.70e3 1.49e3 ## 5 09 Ciudad … 002 Azcapo… 0001 Azcapo… 0010 001 1.59e2 8.6 e1 7.3 e1 ## 6 09 Ciudad … 002 Azcapo… 0001 Azcapo… 0010 002 1.45e2 8 e1 6.5 e1 ## 7 09 Ciudad … 002 Azcapo… 0001 Azcapo… 0010 003 1.24e2 6.4 e1 6 e1 ## 8 09 Ciudad … 002 Azcapo… 0001 Azcapo… 0010 004 1.58e2 8.3 e1 7.5 e1 ## 9 09 Ciudad … 002 Azcapo… 0001 Azcapo… 0010 005 1.54e2 8.6 e1 6.8 e1 ## 10 09 Ciudad … 002 Azcapo… 0001 Azcapo… 0010 006 1.53e2 8.6 e1 6.7 e1 ## # … with 68,931 more rows, and 219 more variables: P_0A2 &lt;dbl&gt;, P_0A2_F &lt;dbl&gt;, ## # P_0A2_M &lt;dbl&gt;, P_3YMAS &lt;dbl&gt;, P_3YMAS_F &lt;dbl&gt;, P_3YMAS_M &lt;dbl&gt;, ## # P_5YMAS &lt;dbl&gt;, P_5YMAS_F &lt;dbl&gt;, P_5YMAS_M &lt;dbl&gt;, P_12YMAS &lt;dbl&gt;, ## # P_12YMAS_F &lt;dbl&gt;, P_12YMAS_M &lt;dbl&gt;, P_15YMAS &lt;dbl&gt;, P_15YMAS_F &lt;dbl&gt;, ## # P_15YMAS_M &lt;dbl&gt;, P_18YMAS &lt;dbl&gt;, P_18YMAS_F &lt;dbl&gt;, P_18YMAS_M &lt;dbl&gt;, ## # P_3A5 &lt;dbl&gt;, P_3A5_F &lt;dbl&gt;, P_3A5_M &lt;dbl&gt;, P_6A11 &lt;dbl&gt;, P_6A11_F &lt;dbl&gt;, ## # P_6A11_M &lt;dbl&gt;, P_8A14 &lt;dbl&gt;, P_8A14_F &lt;dbl&gt;, P_8A14_M &lt;dbl&gt;, … Dependiendo de la población objetivo definida por el grupo investigador, será necesario depurar los elementos necesarios. Por ejemplo, si se desea realizar una encuesta exclusivamente en la alcaldía de Gustavo A. Madero en la Ciudad de México, deberemos ejecutar las siguientes instrucciones: marco &lt;- cnpv %&gt;% mutate( VIVPAR_HAB = as.numeric(VIVPAR_HAB), POBTOT = as.numeric(POBTOT)) %&gt;% filter( ENTIDAD == &#39;09&#39;, MUN == &#39;005&#39;, NOM_LOC == &quot;Gustavo A. Madero&quot;, P_18YMAS &gt; 20, !is.na(VIVPAR_HAB), VIVPAR_HAB &gt; 10 ) %&gt;% select(ENTIDAD, MUN, NOM_MUN, LOC, AGEB, MZA, POBTOT, P_18YMAS, VIVPAR_HAB) marco ## # A tibble: 7,344 × 9 ## ENTIDAD MUN NOM_MUN LOC AGEB MZA POBTOT P_18YMAS VIVPAR_HAB ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 09 005 Gustavo A. Madero 0001 0012 001 172 129 46 ## 2 09 005 Gustavo A. Madero 0001 0012 002 150 107 43 ## 3 09 005 Gustavo A. Madero 0001 0012 003 135 105 50 ## 4 09 005 Gustavo A. Madero 0001 0012 004 119 97 45 ## 5 09 005 Gustavo A. Madero 0001 0012 005 195 141 61 ## 6 09 005 Gustavo A. Madero 0001 0012 006 226 165 62 ## 7 09 005 Gustavo A. Madero 0001 0012 007 186 127 49 ## 8 09 005 Gustavo A. Madero 0001 0012 008 98 70 36 ## 9 09 005 Gustavo A. Madero 0001 0012 010 178 130 48 ## 10 09 005 Gustavo A. Madero 0001 0012 011 135 101 44 ## # … with 7,334 more rows 4.2 Tamaño de muestra Es imprescindible en una buena estimación conocer el tamaño de muestra adecuado que permitirá controlar o cuantificar el error de muestreo. Se presenta a continuación la fórmula estadística que permite conocer el tamaño de muestra necesario para lograr con 95% de confianza (\\(\\alpha\\)) un error de muestreo (e). Esta fórmula corresponde se calcula a partir de un diseño de muestreo aleatorio simple, donde la variable de respuesta es categórica: \\[ m=\\frac{p(1-p)Z_{1-\\alpha/2}^2}{e²}; \\] \\[n=\\frac{m}{1+\\frac{m}{N}} \\frac{deff}{(1-TNR)}\\] Donde: N = Es el tamaño de población. n = Tamaño de muestra. p = Proporción esperada (50% por default). \\(Z_{1-\\alpha/2}\\) = Percentil \\(\\alpha/2\\) de la distribución Normal estándar. e = Error de muestreo máximo a tolerar. TNR = Tasa de no respuesta deff = Efecto de diseño (aumento en la varianza por usar un diseño distinto al aleatorio simple) ¡¡ RECORDAR !! En la medida en que se desea disminuir el error de muestreo, es necesario incrementar de manera exponencial el tamaño de muestra. Se presenta a continuación una función creada con R (software estadístico) para conocer el tamaño de muestra de una población. Es necesario indicar los parámetros e hipótesis bajo los cuales se realizará dicho cálculo. Posteriormente, se presenta una gráfica que permite conocer el tamaño de muestra de acuerdo con el error de muestreo a tolerar (suponiendo fijos otros parámetros). 4.2.1 Implementación en R n_muestra &lt;- function(e = 0.04, p = 0.5, alpha = 0.95, N = 100000, deff = 1.5, tnr = 0.10){ m = p*(1-p)*(qnorm(1- (1-alpha)/2)/e)^2 n = ceiling( (m/(1 + m/N)) * deff/(1 - tnr ) ) return(n) } Ejemplo Suponiendo un tamaño poblacional de 3 millones de personas, y con 95% de confianza un error máximo a tolerar de 2%, el tamaño de muestra necesario para estimar una proporción es: n_muestra(e = 0.02, p = 0.5, alpha = 0.95, N = 3000000, deff = 1.7, tnr = 0.05) ## [1] 4293 En este ejemplo, por practicidad se redondea el tamaño de la muestra a 4,300 unidades. Veamos ahora una gráfica que permita anañizar la relación existente entre el tamaño de muestra y el error de muestreo. library(dplyr) library(ggplot2) tam_muestra &lt;- tibble(error = seq(0.02, 0.1, by = 0.001)) tam_muestra %&gt;% mutate(n = n_muestra(e = error, p = 0.5, alpha = 0.95, N = 100000, deff = 1.7, tnr = 0.1)) %&gt;% ggplot(aes(x = error, y = n)) + geom_line() + geom_point() + ggtitle(&quot;Relación entre error de muestreo y tamaño de muestra&quot;) + xlab(&quot;Error de muestreo&quot;) + ylab(&quot;Tamaño de muestra&quot;) Ahora analizaremos la relación existente entre el tamaño de muestra y el tamaño poblacional cuando fijamos el error de muestreo en 3.5%. tam_muestra &lt;- tibble(N = seq(1, 100000, by = 1000)) tam_muestra %&gt;% mutate(n = n_muestra(e = 0.035, N = N)) %&gt;% ggplot(aes(x = N, y = n)) + geom_line() + geom_point() + scale_y_continuous(limits = c(0, 1500), breaks = seq(0, 1500, by = 100)) + ggtitle(&quot;Relación entre tamaño de población y tamaño de muestra&quot;) + xlab(&quot;Tamaño de población&quot;) + ylab(&quot;Tamaño de muestra&quot;) Se puede apreciar que a mayor tamaño de población es necesario una muestra más grande, sin embargo, no es un comportamiento lineal. Debido a que una de las condiciones de muestreo es que la selección es aleatoria, existe un punto de saturación de información, en donde no se necesita aumentar más el tamaño de muestra (aunque el tamaño de la población siga creciendo) ¡¡ RECORDAR !! Para lograr estimaciones representativas de ALTA calidad sobre la población, es indispensable realizar un buen diseño de muestreo, de lo contrario los resultados pueden estar sesgados. EJERCICIO Realizar el cálculo del tamaño de muestra necesario para los siguientes escenarios: Encuesta de opinión a los alumnos de este grupo de clases Encuesta Nacional a población de 18 años y más Encuesta en alcaldía de Gustavo A. Madero en CDMX a personas de 12 años y más Calculemos distintos posibles tamaños de muestra que consideren diversos escenarios en cuanto al error máximo a tolerar para nuestras estimaciones. Suponga además que el costo obtención de cada cuestionario tiene un precio alrededor de $270.00 + IVA y que cuenta con un presupuesto de $645,000.00 marco %&gt;% summarise( viv = sum(VIVPAR_HAB, na.rm = T), pob = sum(P_18YMAS, na.rm = T) ) ## # A tibble: 1 × 2 ## viv pob ## &lt;dbl&gt; &lt;dbl&gt; ## 1 326619 886279 n_muestra(e = 0.06, p = 0.5, alpha = 0.95, N = 886279, deff = 1.7, tnr = 0.1) ## [1] 504 n_muestra(e = 0.05, p = 0.5, alpha = 0.95, N = 886279, deff = 1.7, tnr = 0.1) ## [1] 726 n_muestra(e = 0.04, p = 0.5, alpha = 0.95, N = 886279, deff = 1.7, tnr = 0.1) ## [1] 1133 n_muestra(e = 0.03, p = 0.5, alpha = 0.95, N = 886279, deff = 1.7, tnr = 0.1) ## [1] 2014 n_muestra(e = 0.02, p = 0.5, alpha = 0.95, N = 886279, deff = 1.7, tnr = 0.1) ## [1] 4523 EJERCICIO ¿Cuál sería el tamaño de muestra que elegirías para el estudio? Considera en tu ejercicio todos los gastos de honorarios que deben ser cubiertos a tu equipo de trabajo y haz una propuesta técnica y económica 4.3 Distribución muestral Una vez que el tamaño de muestra ha sido calculado, es común que se proceda a distribuirla de una manera estratégica que permita recolectar de manera óptima la información necesaria. Existe distintos tipos de distribución (afijación), las cuales dependen de que existan estratos (grupos) de la población sobre los cuales se desea distribuir la muestra. Entre las más comunes, se encuentran: Afijación simple: En este tipo de afijación, la muestra se distribuye de manera igualitaria entre los distintos grupos. La fórmula es la siguiente: \\[n_h=\\frac{n}{L}\\] Donde: \\(n_h=\\) Es el tamaño de muestra en el h-ésimo estrato \\(n=\\) Es el tamaño de muestra total \\(L=\\) Es el número de estratos Afijación proporcional: Posiblemente es el tipo de afijación más usado. Esta estrategia se usa para distribuir la muestra de manera proporcional a una característica. Por regla general, se distribuye de acuerdo con la distribución poblacional (viviendas o personas) en zonas geográficas. La fórmula es la siguiente: \\[n_h = \\frac{P_h}{P} \\cdot n\\] Donde: \\(n_h=\\) Es el tamaño de muestra ajustado en el h-ésimo estrato \\(n=\\) Es el tamaño de muestra global \\(P_h=\\) Es la población en el h-ésimo estrato \\(P=\\) Es la población total 4.3.1 Implementación en R Suponga por un momento que contamos con una característica particular de interés en la que podemos clasificar a la población de manzanas, puede ser el ámbito (rural vs urbano) o alguna otra clasificación de interés. Para fines prácticos, clasificaremos las manzanas dependiendo del número de viviendas particulares habitadas. La clasificación es la siguiente: Estrato 1: 0-25 viviendas Estrato 2: 26-35 viviendas Estrato 3: 36-55 viviendas Estrato 4: 56 o más viviendas marco &lt;- marco %&gt;% mutate(estrato = case_when( VIVPAR_HAB &lt;= 35 ~ &quot;gpo1&quot;, VIVPAR_HAB &lt;= 55 ~ &quot;gpo2&quot;, VIVPAR_HAB &lt;= 80 ~ &quot;gpo3&quot;, TRUE ~ &quot;gpo4&quot;, )) marco ## # A tibble: 7,344 × 10 ## ENTIDAD MUN NOM_MUN LOC AGEB MZA POBTOT P_18YMAS VIVPAR_HAB estrato ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 09 005 Gustavo A… 0001 0012 001 172 129 46 gpo2 ## 2 09 005 Gustavo A… 0001 0012 002 150 107 43 gpo2 ## 3 09 005 Gustavo A… 0001 0012 003 135 105 50 gpo2 ## 4 09 005 Gustavo A… 0001 0012 004 119 97 45 gpo2 ## 5 09 005 Gustavo A… 0001 0012 005 195 141 61 gpo3 ## 6 09 005 Gustavo A… 0001 0012 006 226 165 62 gpo3 ## 7 09 005 Gustavo A… 0001 0012 007 186 127 49 gpo2 ## 8 09 005 Gustavo A… 0001 0012 008 98 70 36 gpo2 ## 9 09 005 Gustavo A… 0001 0012 010 178 130 48 gpo2 ## 10 09 005 Gustavo A… 0001 0012 011 135 101 44 gpo2 ## # … with 7,334 more rows pob_estrato &lt;- marco %&gt;% group_by(estrato) %&gt;% summarise( n = n(), pob = sum(P_18YMAS, na.rm = T), viv = sum(VIVPAR_HAB, na.rm = T) ) pob_estrato ## # A tibble: 4 × 4 ## estrato n pob viv ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 gpo1 3545 228196 81666 ## 2 gpo2 2059 251101 91323 ## 3 gpo3 1069 190801 70584 ## 4 gpo4 671 216181 83046 Suponiendo que el tamaño de muestra seleccionado es de 2,000 individuos y se desea hacer una afijación proporcional, el tamaño de muestra en cada estrato queda asignado de la siguiente forma: pob_estrato %&gt;% mutate( prop = viv/sum(viv), n_h = round(prop * 2000) ) ## # A tibble: 4 × 6 ## estrato n pob viv prop n_h ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 gpo1 3545 228196 81666 0.250 500 ## 2 gpo2 2059 251101 91323 0.280 559 ## 3 gpo3 1069 190801 70584 0.216 432 ## 4 gpo4 671 216181 83046 0.254 509 "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
